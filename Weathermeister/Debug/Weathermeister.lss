
Weathermeister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001474  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  0080006c  0080006c  00001514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019fd  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00003079  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000710  00000000  00000000  000036e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00003df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000557  00000000  00000000  000041d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018ce  00000000  00000000  0000472b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00005ff9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <ds1307_getdate+0x6e>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__zero_reg__+0x3b>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <bmp085_getrawpressure+0xb0>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <bmp085_getcalibration+0x70>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <i2c_start+0x26>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e7       	ldi	r30, 0x74	; 116
     162:	f4 e1       	ldi	r31, 0x14	; 20
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	ac 36       	cpi	r26, 0x6C	; 108
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	ac e6       	ldi	r26, 0x6C	; 108
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ae 3d       	cpi	r26, 0xDE	; 222
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 c5 05 	call	0xb8a	; 0xb8a <main>
     184:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     18c:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     18e:	8a e2       	ldi	r24, 0x2A	; 42
     190:	80 b9       	out	0x00, r24	; 0
     192:	08 95       	ret

00000194 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     194:	94 ea       	ldi	r25, 0xA4	; 164
     196:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     198:	06 b6       	in	r0, 0x36	; 54
     19a:	07 fe       	sbrs	r0, 7
     19c:	fd cf       	rjmp	.-6      	; 0x198 <i2c_start+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     19e:	91 b1       	in	r25, 0x01	; 1
     1a0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     1a2:	98 30       	cpi	r25, 0x08	; 8
     1a4:	11 f0       	breq	.+4      	; 0x1aa <i2c_start+0x16>
     1a6:	90 31       	cpi	r25, 0x10	; 16
     1a8:	79 f4       	brne	.+30     	; 0x1c8 <i2c_start+0x34>

	// send device address
	TWDR = address;
     1aa:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     1ac:	84 e8       	ldi	r24, 0x84	; 132
     1ae:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     1b0:	06 b6       	in	r0, 0x36	; 54
     1b2:	07 fe       	sbrs	r0, 7
     1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <i2c_start+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     1b6:	91 b1       	in	r25, 0x01	; 1
     1b8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     1ba:	98 31       	cpi	r25, 0x18	; 24
     1bc:	39 f0       	breq	.+14     	; 0x1cc <i2c_start+0x38>
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 34       	cpi	r25, 0x40	; 64
     1c2:	29 f4       	brne	.+10     	; 0x1ce <i2c_start+0x3a>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     1cc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     1ce:	08 95       	ret

000001d0 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     1d0:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1d2:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1d4:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     1d6:	26 bf       	out	0x36, r18	; 54
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1d8:	06 b6       	in	r0, 0x36	; 54
     1da:	07 fe       	sbrs	r0, 7
     1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <i2c_start_wait+0x8>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1de:	91 b1       	in	r25, 0x01	; 1
     1e0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     1e2:	98 30       	cpi	r25, 0x08	; 8
     1e4:	11 f0       	breq	.+4      	; 0x1ea <i2c_start_wait+0x1a>
     1e6:	90 31       	cpi	r25, 0x10	; 16
     1e8:	b1 f7       	brne	.-20     	; 0x1d6 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     1ea:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1ec:	36 bf       	out	0x36, r19	; 54
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1ee:	06 b6       	in	r0, 0x36	; 54
     1f0:	07 fe       	sbrs	r0, 7
     1f2:	fd cf       	rjmp	.-6      	; 0x1ee <i2c_start_wait+0x1e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1f4:	91 b1       	in	r25, 0x01	; 1
     1f6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1f8:	90 32       	cpi	r25, 0x20	; 32
     1fa:	11 f0       	breq	.+4      	; 0x200 <i2c_start_wait+0x30>
     1fc:	98 35       	cpi	r25, 0x58	; 88
     1fe:	29 f4       	brne	.+10     	; 0x20a <i2c_start_wait+0x3a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     200:	46 bf       	out	0x36, r20	; 54
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     202:	06 b6       	in	r0, 0x36	; 54
     204:	04 fc       	sbrc	r0, 4
     206:	fd cf       	rjmp	.-6      	; 0x202 <i2c_start_wait+0x32>
     208:	e6 cf       	rjmp	.-52     	; 0x1d6 <i2c_start_wait+0x6>
     20a:	08 95       	ret

0000020c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     20c:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_start>

}/* i2c_rep_start */
     210:	08 95       	ret

00000212 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     212:	84 e9       	ldi	r24, 0x94	; 148
     214:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     216:	06 b6       	in	r0, 0x36	; 54
     218:	04 fc       	sbrc	r0, 4
     21a:	fd cf       	rjmp	.-6      	; 0x216 <i2c_stop+0x4>

}/* i2c_stop */
     21c:	08 95       	ret

0000021e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     21e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     220:	84 e8       	ldi	r24, 0x84	; 132
     222:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     224:	06 b6       	in	r0, 0x36	; 54
     226:	07 fe       	sbrs	r0, 7
     228:	fd cf       	rjmp	.-6      	; 0x224 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     22a:	91 b1       	in	r25, 0x01	; 1
     22c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	98 32       	cpi	r25, 0x28	; 40
     232:	09 f4       	brne	.+2      	; 0x236 <i2c_write+0x18>
     234:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     236:	08 95       	ret

00000238 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     238:	84 ec       	ldi	r24, 0xC4	; 196
     23a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
     23c:	06 b6       	in	r0, 0x36	; 54
     23e:	07 fe       	sbrs	r0, 7
     240:	fd cf       	rjmp	.-6      	; 0x23c <i2c_readAck+0x4>

    return TWDR;
     242:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
     244:	08 95       	ret

00000246 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     246:	84 e8       	ldi	r24, 0x84	; 132
     248:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
     24a:	06 b6       	in	r0, 0x36	; 54
     24c:	07 fe       	sbrs	r0, 7
     24e:	fd cf       	rjmp	.-6      	; 0x24a <i2c_readNak+0x4>
	
    return TWDR;
     250:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
     252:	08 95       	ret

00000254 <bmp085_writemem>:
/*
 * BMP180 COMMUNICATION
 */


void bmp085_writemem(uint8_t reg, uint8_t value) {
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	d8 2f       	mov	r29, r24
     25a:	c6 2f       	mov	r28, r22
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     25c:	8e ee       	ldi	r24, 0xEE	; 238
     25e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_start_wait>
	i2c_write(reg);
     262:	8d 2f       	mov	r24, r29
     264:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_write>
	i2c_write(value);
     268:	8c 2f       	mov	r24, r28
     26a:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_write>
	i2c_stop();
     26e:	0e 94 09 01 	call	0x212	; 0x212 <i2c_stop>
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <bmp085_readmem>:

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
     278:	df 92       	push	r13
     27a:	ef 92       	push	r14
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	c8 2f       	mov	r28, r24
     288:	f6 2e       	mov	r15, r22
     28a:	d7 2f       	mov	r29, r23
     28c:	d4 2e       	mov	r13, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     28e:	8e ee       	ldi	r24, 0xEE	; 238
     290:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_start_wait>
	i2c_write(reg);
     294:	8c 2f       	mov	r24, r28
     296:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
     29a:	8f ee       	ldi	r24, 0xEF	; 239
     29c:	0e 94 06 01 	call	0x20c	; 0x20c <i2c_rep_start>
	for(i=0; i<bytes; i++) {
     2a0:	dd 20       	and	r13, r13
     2a2:	d1 f0       	breq	.+52     	; 0x2d8 <bmp085_readmem+0x60>
     2a4:	0f 2d       	mov	r16, r15
     2a6:	1d 2f       	mov	r17, r29
     2a8:	c0 e0       	ldi	r28, 0x00	; 0
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
		if(i==bytes-1)
     2ac:	ed 2c       	mov	r14, r13
     2ae:	f1 2c       	mov	r15, r1
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	e8 1a       	sub	r14, r24
     2b4:	f1 08       	sbc	r15, r1
     2b6:	ce 15       	cp	r28, r14
     2b8:	df 05       	cpc	r29, r15
     2ba:	29 f4       	brne	.+10     	; 0x2c6 <bmp085_readmem+0x4e>
			buff[i] = i2c_readNak();
     2bc:	0e 94 23 01 	call	0x246	; 0x246 <i2c_readNak>
     2c0:	f8 01       	movw	r30, r16
     2c2:	80 83       	st	Z, r24
     2c4:	04 c0       	rjmp	.+8      	; 0x2ce <bmp085_readmem+0x56>
		else
			buff[i] = i2c_readAck();
     2c6:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_readAck>
     2ca:	f8 01       	movw	r30, r16
     2cc:	80 83       	st	Z, r24
     2ce:	21 96       	adiw	r28, 0x01	; 1
     2d0:	0f 5f       	subi	r16, 0xFF	; 255
     2d2:	1f 4f       	sbci	r17, 0xFF	; 255
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
     2d4:	cd 15       	cp	r28, r13
     2d6:	78 f3       	brcs	.-34     	; 0x2b6 <bmp085_readmem+0x3e>
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     2d8:	0e 94 09 01 	call	0x212	; 0x212 <i2c_stop>
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	08 95       	ret

000002ec <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	e0 ec       	ldi	r30, 0xC0	; 192
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	cc e6       	ldi	r28, 0x6C	; 108
     2fa:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
     2fc:	0c 81       	ldd	r16, Y+4	; 0x04
     2fe:	1d 81       	ldd	r17, Y+5	; 0x05
     300:	2e 81       	ldd	r18, Y+6	; 0x06
     302:	3f 81       	ldd	r19, Y+7	; 0x07
     304:	09 93       	st	Y+, r16
     306:	19 93       	st	Y+, r17
     308:	29 93       	st	Y+, r18
     30a:	39 93       	st	Y+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     30c:	ce 17       	cp	r28, r30
     30e:	df 07       	cpc	r29, r31
     310:	a9 f7       	brne	.-22     	; 0x2fc <bmp085_avaragefilter+0x10>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
     312:	60 93 bc 00 	sts	0x00BC, r22
     316:	70 93 bd 00 	sts	0x00BD, r23
     31a:	80 93 be 00 	sts	0x00BE, r24
     31e:	90 93 bf 00 	sts	0x00BF, r25
     322:	ac e6       	ldi	r26, 0x6C	; 108
     324:	b0 e0       	ldi	r27, 0x00	; 0
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
     32c:	0d 91       	ld	r16, X+
     32e:	1d 91       	ld	r17, X+
     330:	2d 91       	ld	r18, X+
     332:	3d 91       	ld	r19, X+
     334:	60 0f       	add	r22, r16
     336:	71 1f       	adc	r23, r17
     338:	82 1f       	adc	r24, r18
     33a:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     33c:	ae 17       	cp	r26, r30
     33e:	bf 07       	cpc	r27, r31
     340:	a9 f7       	brne	.-22     	; 0x32c <bmp085_avaragefilter+0x40>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
     342:	25 e1       	ldi	r18, 0x15	; 21
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
}
     34e:	ca 01       	movw	r24, r20
     350:	b9 01       	movw	r22, r18
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	08 95       	ret

0000035c <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <bmp085_getcalibration+0x6>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     366:	1a 82       	std	Y+2, r1	; 0x02
     368:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
     36a:	42 e0       	ldi	r20, 0x02	; 2
     36c:	be 01       	movw	r22, r28
     36e:	6f 5f       	subi	r22, 0xFF	; 255
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	8a ea       	ldi	r24, 0xAA	; 170
     374:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	98 2f       	mov	r25, r24
     37e:	88 27       	eor	r24, r24
     380:	2a 81       	ldd	r18, Y+2	; 0x02
     382:	82 2b       	or	r24, r18
     384:	90 93 d5 00 	sts	0x00D5, r25
     388:	80 93 d4 00 	sts	0x00D4, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
     38c:	42 e0       	ldi	r20, 0x02	; 2
     38e:	be 01       	movw	r22, r28
     390:	6f 5f       	subi	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	8c ea       	ldi	r24, 0xAC	; 172
     396:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	98 2f       	mov	r25, r24
     3a0:	88 27       	eor	r24, r24
     3a2:	2a 81       	ldd	r18, Y+2	; 0x02
     3a4:	82 2b       	or	r24, r18
     3a6:	90 93 dd 00 	sts	0x00DD, r25
     3aa:	80 93 dc 00 	sts	0x00DC, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
     3ae:	42 e0       	ldi	r20, 0x02	; 2
     3b0:	be 01       	movw	r22, r28
     3b2:	6f 5f       	subi	r22, 0xFF	; 255
     3b4:	7f 4f       	sbci	r23, 0xFF	; 255
     3b6:	8e ea       	ldi	r24, 0xAE	; 174
     3b8:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	98 2f       	mov	r25, r24
     3c2:	88 27       	eor	r24, r24
     3c4:	2a 81       	ldd	r18, Y+2	; 0x02
     3c6:	82 2b       	or	r24, r18
     3c8:	90 93 c9 00 	sts	0x00C9, r25
     3cc:	80 93 c8 00 	sts	0x00C8, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
     3d0:	42 e0       	ldi	r20, 0x02	; 2
     3d2:	be 01       	movw	r22, r28
     3d4:	6f 5f       	subi	r22, 0xFF	; 255
     3d6:	7f 4f       	sbci	r23, 0xFF	; 255
     3d8:	80 eb       	ldi	r24, 0xB0	; 176
     3da:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	98 2f       	mov	r25, r24
     3e4:	88 27       	eor	r24, r24
     3e6:	2a 81       	ldd	r18, Y+2	; 0x02
     3e8:	82 2b       	or	r24, r18
     3ea:	90 93 c1 00 	sts	0x00C1, r25
     3ee:	80 93 c0 00 	sts	0x00C0, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
     3f2:	42 e0       	ldi	r20, 0x02	; 2
     3f4:	be 01       	movw	r22, r28
     3f6:	6f 5f       	subi	r22, 0xFF	; 255
     3f8:	7f 4f       	sbci	r23, 0xFF	; 255
     3fa:	82 eb       	ldi	r24, 0xB2	; 178
     3fc:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	98 2f       	mov	r25, r24
     406:	88 27       	eor	r24, r24
     408:	2a 81       	ldd	r18, Y+2	; 0x02
     40a:	82 2b       	or	r24, r18
     40c:	90 93 d9 00 	sts	0x00D9, r25
     410:	80 93 d8 00 	sts	0x00D8, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
     414:	42 e0       	ldi	r20, 0x02	; 2
     416:	be 01       	movw	r22, r28
     418:	6f 5f       	subi	r22, 0xFF	; 255
     41a:	7f 4f       	sbci	r23, 0xFF	; 255
     41c:	84 eb       	ldi	r24, 0xB4	; 180
     41e:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	98 2f       	mov	r25, r24
     428:	88 27       	eor	r24, r24
     42a:	2a 81       	ldd	r18, Y+2	; 0x02
     42c:	82 2b       	or	r24, r18
     42e:	90 93 d1 00 	sts	0x00D1, r25
     432:	80 93 d0 00 	sts	0x00D0, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
     436:	42 e0       	ldi	r20, 0x02	; 2
     438:	be 01       	movw	r22, r28
     43a:	6f 5f       	subi	r22, 0xFF	; 255
     43c:	7f 4f       	sbci	r23, 0xFF	; 255
     43e:	86 eb       	ldi	r24, 0xB6	; 182
     440:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	98 2f       	mov	r25, r24
     44a:	88 27       	eor	r24, r24
     44c:	2a 81       	ldd	r18, Y+2	; 0x02
     44e:	82 2b       	or	r24, r18
     450:	90 93 cf 00 	sts	0x00CF, r25
     454:	80 93 ce 00 	sts	0x00CE, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	be 01       	movw	r22, r28
     45c:	6f 5f       	subi	r22, 0xFF	; 255
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	88 eb       	ldi	r24, 0xB8	; 184
     462:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	98 2f       	mov	r25, r24
     46c:	88 27       	eor	r24, r24
     46e:	2a 81       	ldd	r18, Y+2	; 0x02
     470:	82 2b       	or	r24, r18
     472:	90 93 c3 00 	sts	0x00C3, r25
     476:	80 93 c2 00 	sts	0x00C2, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
     47a:	42 e0       	ldi	r20, 0x02	; 2
     47c:	be 01       	movw	r22, r28
     47e:	6f 5f       	subi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	8a eb       	ldi	r24, 0xBA	; 186
     484:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	98 2f       	mov	r25, r24
     48e:	88 27       	eor	r24, r24
     490:	2a 81       	ldd	r18, Y+2	; 0x02
     492:	82 2b       	or	r24, r18
     494:	90 93 d7 00 	sts	0x00D7, r25
     498:	80 93 d6 00 	sts	0x00D6, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
     49c:	42 e0       	ldi	r20, 0x02	; 2
     49e:	be 01       	movw	r22, r28
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	8c eb       	ldi	r24, 0xBC	; 188
     4a6:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	98 2f       	mov	r25, r24
     4b0:	88 27       	eor	r24, r24
     4b2:	2a 81       	ldd	r18, Y+2	; 0x02
     4b4:	82 2b       	or	r24, r18
     4b6:	90 93 db 00 	sts	0x00DB, r25
     4ba:	80 93 da 00 	sts	0x00DA, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
     4be:	42 e0       	ldi	r20, 0x02	; 2
     4c0:	be 01       	movw	r22, r28
     4c2:	6f 5f       	subi	r22, 0xFF	; 255
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	8e eb       	ldi	r24, 0xBE	; 190
     4c8:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	98 2f       	mov	r25, r24
     4d2:	88 27       	eor	r24, r24
     4d4:	2a 81       	ldd	r18, Y+2	; 0x02
     4d6:	82 2b       	or	r24, r18
     4d8:	90 93 d3 00 	sts	0x00D3, r25
     4dc:	80 93 d2 00 	sts	0x00D2, r24
}
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <bmp085_getrawtemperature+0x12>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     500:	1a 82       	std	Y+2, r1	; 0x02
     502:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
     504:	6e e2       	ldi	r22, 0x2E	; 46
     506:	84 ef       	ldi	r24, 0xF4	; 244
     508:	0e 94 2a 01 	call	0x254	; 0x254 <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50c:	81 ee       	ldi	r24, 0xE1	; 225
     50e:	94 e0       	ldi	r25, 0x04	; 4
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <bmp085_getrawtemperature+0x26>
     514:	00 c0       	rjmp	.+0      	; 0x516 <bmp085_getrawtemperature+0x2c>
     516:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
     518:	42 e0       	ldi	r20, 0x02	; 2
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	86 ef       	ldi	r24, 0xF6	; 246
     522:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
     526:	29 81       	ldd	r18, Y+1	; 0x01
     528:	82 2f       	mov	r24, r18
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	44 27       	eor	r20, r20
     532:	58 2f       	mov	r21, r24
     534:	69 2f       	mov	r22, r25
     536:	7a 2f       	mov	r23, r26
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	48 2b       	or	r20, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
     53c:	80 91 d0 00 	lds	r24, 0x00D0
     540:	90 91 d1 00 	lds	r25, 0x00D1
     544:	9a 01       	movw	r18, r20
     546:	ab 01       	movw	r20, r22
     548:	28 1b       	sub	r18, r24
     54a:	39 0b       	sbc	r19, r25
     54c:	41 09       	sbc	r20, r1
     54e:	51 09       	sbc	r21, r1
     550:	a0 91 d8 00 	lds	r26, 0x00D8
     554:	b0 91 d9 00 	lds	r27, 0x00D9
     558:	0e 94 79 07 	call	0xef2	; 0xef2 <__muluhisi3>
     55c:	6b 01       	movw	r12, r22
     55e:	7c 01       	movw	r14, r24
     560:	0b 2e       	mov	r0, r27
     562:	bf e0       	ldi	r27, 0x0F	; 15
     564:	f5 94       	asr	r15
     566:	e7 94       	ror	r14
     568:	d7 94       	ror	r13
     56a:	c7 94       	ror	r12
     56c:	ba 95       	dec	r27
     56e:	d1 f7       	brne	.-12     	; 0x564 <bmp085_getrawtemperature+0x7a>
     570:	b0 2d       	mov	r27, r0
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
     572:	60 91 da 00 	lds	r22, 0x00DA
     576:	70 91 db 00 	lds	r23, 0x00DB
     57a:	cb 01       	movw	r24, r22
     57c:	aa 27       	eor	r26, r26
     57e:	97 fd       	sbrc	r25, 7
     580:	a0 95       	com	r26
     582:	ba 2f       	mov	r27, r26
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	05 2e       	mov	r0, r21
     58a:	5b e0       	ldi	r21, 0x0B	; 11
     58c:	66 0f       	add	r22, r22
     58e:	77 1f       	adc	r23, r23
     590:	88 1f       	adc	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	5a 95       	dec	r21
     596:	d1 f7       	brne	.-12     	; 0x58c <bmp085_getrawtemperature+0xa2>
     598:	50 2d       	mov	r21, r0
     59a:	20 91 d2 00 	lds	r18, 0x00D2
     59e:	30 91 d3 00 	lds	r19, 0x00D3
     5a2:	89 01       	movw	r16, r18
     5a4:	22 27       	eor	r18, r18
     5a6:	17 fd       	sbrc	r17, 7
     5a8:	20 95       	com	r18
     5aa:	32 2f       	mov	r19, r18
     5ac:	a9 01       	movw	r20, r18
     5ae:	98 01       	movw	r18, r16
     5b0:	2c 0d       	add	r18, r12
     5b2:	3d 1d       	adc	r19, r13
     5b4:	4e 1d       	adc	r20, r14
     5b6:	5f 1d       	adc	r21, r15
     5b8:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
	bmp085_rawtemperature = x1 + x2;
     5bc:	c2 0e       	add	r12, r18
     5be:	d3 1e       	adc	r13, r19
     5c0:	e4 1e       	adc	r14, r20
     5c2:	f5 1e       	adc	r15, r21
     5c4:	c0 92 ca 00 	sts	0x00CA, r12
     5c8:	d0 92 cb 00 	sts	0x00CB, r13
     5cc:	e0 92 cc 00 	sts	0x00CC, r14
     5d0:	f0 92 cd 00 	sts	0x00CD, r15
}
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	08 95       	ret

000005ea <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
     5ea:	4f 92       	push	r4
     5ec:	5f 92       	push	r5
     5ee:	6f 92       	push	r6
     5f0:	7f 92       	push	r7
     5f2:	8f 92       	push	r8
     5f4:	9f 92       	push	r9
     5f6:	af 92       	push	r10
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	2b 97       	sbiw	r28, 0x0b	; 11
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
     616:	19 82       	std	Y+1, r1	; 0x01
     618:	1a 82       	std	Y+2, r1	; 0x02
     61a:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
     61c:	0e 94 75 02 	call	0x4ea	; 0x4ea <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
     620:	64 ef       	ldi	r22, 0xF4	; 244
     622:	84 ef       	ldi	r24, 0xF4	; 244
     624:	0e 94 2a 01 	call	0x254	; 0x254 <bmp085_writemem>
     628:	83 e6       	ldi	r24, 0x63	; 99
     62a:	99 e1       	ldi	r25, 0x19	; 25
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <bmp085_getrawpressure+0x42>
     630:	00 c0       	rjmp	.+0      	; 0x632 <bmp085_getrawpressure+0x48>
     632:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
     634:	43 e0       	ldi	r20, 0x03	; 3
     636:	be 01       	movw	r22, r28
     638:	6f 5f       	subi	r22, 0xFF	; 255
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	86 ef       	ldi	r24, 0xF6	; 246
     63e:	0e 94 3c 01 	call	0x278	; 0x278 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
     642:	c0 90 ca 00 	lds	r12, 0x00CA
     646:	d0 90 cb 00 	lds	r13, 0x00CB
     64a:	e0 90 cc 00 	lds	r14, 0x00CC
     64e:	f0 90 cd 00 	lds	r15, 0x00CD
     652:	90 ea       	ldi	r25, 0xA0	; 160
     654:	c9 1a       	sub	r12, r25
     656:	9f e0       	ldi	r25, 0x0F	; 15
     658:	d9 0a       	sbc	r13, r25
     65a:	e1 08       	sbc	r14, r1
     65c:	f1 08       	sbc	r15, r1
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     65e:	a7 01       	movw	r20, r14
     660:	96 01       	movw	r18, r12
     662:	c7 01       	movw	r24, r14
     664:	b6 01       	movw	r22, r12
     666:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsi3>
     66a:	4b 01       	movw	r8, r22
     66c:	5c 01       	movw	r10, r24
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
	x1 = (bmp085_regac3 * b6) >> 13;
     66e:	a0 91 c8 00 	lds	r26, 0x00C8
     672:	b0 91 c9 00 	lds	r27, 0x00C9
     676:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulshisi3>
     67a:	2b 01       	movw	r4, r22
     67c:	3c 01       	movw	r6, r24
     67e:	03 2e       	mov	r0, r19
     680:	3d e0       	ldi	r19, 0x0D	; 13
     682:	75 94       	asr	r7
     684:	67 94       	ror	r6
     686:	57 94       	ror	r5
     688:	47 94       	ror	r4
     68a:	3a 95       	dec	r19
     68c:	d1 f7       	brne	.-12     	; 0x682 <bmp085_getrawpressure+0x98>
     68e:	30 2d       	mov	r19, r0
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
     690:	a0 91 ce 00 	lds	r26, 0x00CE
     694:	b0 91 cf 00 	lds	r27, 0x00CF
     698:	a5 01       	movw	r20, r10
     69a:	94 01       	movw	r18, r8
     69c:	01 2e       	mov	r0, r17
     69e:	1c e0       	ldi	r17, 0x0C	; 12
     6a0:	55 95       	asr	r21
     6a2:	47 95       	ror	r20
     6a4:	37 95       	ror	r19
     6a6:	27 95       	ror	r18
     6a8:	1a 95       	dec	r17
     6aa:	d1 f7       	brne	.-12     	; 0x6a0 <bmp085_getrawpressure+0xb6>
     6ac:	10 2d       	mov	r17, r0
     6ae:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulshisi3>
     6b2:	bb 27       	eor	r27, r27
     6b4:	97 fd       	sbrc	r25, 7
     6b6:	b0 95       	com	r27
     6b8:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     6ba:	48 0e       	add	r4, r24
     6bc:	59 1e       	adc	r5, r25
     6be:	6a 1e       	adc	r6, r26
     6c0:	7b 1e       	adc	r7, r27
     6c2:	22 e0       	ldi	r18, 0x02	; 2
     6c4:	42 0e       	add	r4, r18
     6c6:	51 1c       	adc	r5, r1
     6c8:	61 1c       	adc	r6, r1
     6ca:	71 1c       	adc	r7, r1
     6cc:	d3 01       	movw	r26, r6
     6ce:	c2 01       	movw	r24, r4
     6d0:	b5 95       	asr	r27
     6d2:	a7 95       	ror	r26
     6d4:	97 95       	ror	r25
     6d6:	87 95       	ror	r24
     6d8:	b5 95       	asr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     6e0:	9c 01       	movw	r18, r24
     6e2:	ad 01       	movw	r20, r26
     6e4:	30 58       	subi	r19, 0x80	; 128
     6e6:	4f 4f       	sbci	r20, 0xFF	; 255
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	a0 91 c0 00 	lds	r26, 0x00C0
     6ee:	b0 91 c1 00 	lds	r27, 0x00C1
     6f2:	0e 94 79 07 	call	0xef2	; 0xef2 <__muluhisi3>
     6f6:	9b 01       	movw	r18, r22
     6f8:	ac 01       	movw	r20, r24
     6fa:	01 2e       	mov	r0, r17
     6fc:	1f e0       	ldi	r17, 0x0F	; 15
     6fe:	56 95       	lsr	r21
     700:	47 95       	ror	r20
     702:	37 95       	ror	r19
     704:	27 95       	ror	r18
     706:	1a 95       	dec	r17
     708:	d1 f7       	brne	.-12     	; 0x6fe <bmp085_getrawpressure+0x114>
     70a:	10 2d       	mov	r17, r0
     70c:	28 87       	std	Y+8, r18	; 0x08
     70e:	39 87       	std	Y+9, r19	; 0x09
     710:	4a 87       	std	Y+10, r20	; 0x0a
     712:	5b 87       	std	Y+11, r21	; 0x0b

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
     714:	29 81       	ldd	r18, Y+1	; 0x01
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	ba 2f       	mov	r27, r26
     720:	a9 2f       	mov	r26, r25
     722:	98 2f       	mov	r25, r24
     724:	88 27       	eor	r24, r24
     726:	a2 2b       	or	r26, r18
     728:	2b 81       	ldd	r18, Y+3	; 0x03
     72a:	82 2b       	or	r24, r18
     72c:	9c 01       	movw	r18, r24
     72e:	ad 01       	movw	r20, r26
     730:	68 94       	set
     732:	14 f8       	bld	r1, 4
     734:	55 95       	asr	r21
     736:	47 95       	ror	r20
     738:	37 95       	ror	r19
     73a:	27 95       	ror	r18
     73c:	16 94       	lsr	r1
     73e:	d1 f7       	brne	.-12     	; 0x734 <bmp085_getrawpressure+0x14a>
     740:	2c 83       	std	Y+4, r18	; 0x04
     742:	3d 83       	std	Y+5, r19	; 0x05
     744:	4e 83       	std	Y+6, r20	; 0x06
     746:	5f 83       	std	Y+7, r21	; 0x07
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     748:	40 90 d4 00 	lds	r4, 0x00D4
     74c:	50 90 d5 00 	lds	r5, 0x00D5
     750:	66 24       	eor	r6, r6
     752:	57 fc       	sbrc	r5, 7
     754:	60 94       	com	r6
     756:	76 2c       	mov	r7, r6
     758:	44 0c       	add	r4, r4
     75a:	55 1c       	adc	r5, r5
     75c:	66 1c       	adc	r6, r6
     75e:	77 1c       	adc	r7, r7
     760:	44 0c       	add	r4, r4
     762:	55 1c       	adc	r5, r5
     764:	66 1c       	adc	r6, r6
     766:	77 1c       	adc	r7, r7
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     768:	a0 91 c2 00 	lds	r26, 0x00C2
     76c:	b0 91 c3 00 	lds	r27, 0x00C3
     770:	a5 01       	movw	r20, r10
     772:	94 01       	movw	r18, r8
     774:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulshisi3>
     778:	4b 01       	movw	r8, r22
     77a:	5c 01       	movw	r10, r24
     77c:	07 2e       	mov	r0, r23
     77e:	77 e1       	ldi	r23, 0x17	; 23
     780:	b5 94       	asr	r11
     782:	a7 94       	ror	r10
     784:	97 94       	ror	r9
     786:	87 94       	ror	r8
     788:	7a 95       	dec	r23
     78a:	d1 f7       	brne	.-12     	; 0x780 <bmp085_getrawpressure+0x196>
     78c:	70 2d       	mov	r23, r0
	x2 = (bmp085_regac2 * b6) >> 11;
     78e:	a0 91 dc 00 	lds	r26, 0x00DC
     792:	b0 91 dd 00 	lds	r27, 0x00DD
     796:	a7 01       	movw	r20, r14
     798:	96 01       	movw	r18, r12
     79a:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulshisi3>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	07 2e       	mov	r0, r23
     7a4:	7b e0       	ldi	r23, 0x0B	; 11
     7a6:	b5 95       	asr	r27
     7a8:	a7 95       	ror	r26
     7aa:	97 95       	ror	r25
     7ac:	87 95       	ror	r24
     7ae:	7a 95       	dec	r23
     7b0:	d1 f7       	brne	.-12     	; 0x7a6 <bmp085_getrawpressure+0x1bc>
     7b2:	70 2d       	mov	r23, r0
	x3 = x1 + x2;
     7b4:	88 0e       	add	r8, r24
     7b6:	99 1e       	adc	r9, r25
     7b8:	aa 1e       	adc	r10, r26
     7ba:	bb 1e       	adc	r11, r27
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     7bc:	48 0c       	add	r4, r8
     7be:	59 1c       	adc	r5, r9
     7c0:	6a 1c       	adc	r6, r10
     7c2:	7b 1c       	adc	r7, r11
     7c4:	44 0c       	add	r4, r4
     7c6:	55 1c       	adc	r5, r5
     7c8:	66 1c       	adc	r6, r6
     7ca:	77 1c       	adc	r7, r7
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
     7cc:	2c 81       	ldd	r18, Y+4	; 0x04
     7ce:	3d 81       	ldd	r19, Y+5	; 0x05
     7d0:	4e 81       	ldd	r20, Y+6	; 0x06
     7d2:	5f 81       	ldd	r21, Y+7	; 0x07
     7d4:	24 19       	sub	r18, r4
     7d6:	35 09       	sbc	r19, r5
     7d8:	46 09       	sbc	r20, r6
     7da:	57 09       	sbc	r21, r7
     7dc:	aa e6       	ldi	r26, 0x6A	; 106
     7de:	b8 e1       	ldi	r27, 0x18	; 24
     7e0:	0e 94 79 07 	call	0xef2	; 0xef2 <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     7e4:	99 23       	and	r25, r25
     7e6:	6c f0       	brlt	.+26     	; 0x802 <bmp085_getrawpressure+0x218>
     7e8:	66 0f       	add	r22, r22
     7ea:	77 1f       	adc	r23, r23
     7ec:	88 1f       	adc	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	28 85       	ldd	r18, Y+8	; 0x08
     7f2:	39 85       	ldd	r19, Y+9	; 0x09
     7f4:	4a 85       	ldd	r20, Y+10	; 0x0a
     7f6:	5b 85       	ldd	r21, Y+11	; 0x0b
     7f8:	0e 94 29 07 	call	0xe52	; 0xe52 <__udivmodsi4>
     7fc:	69 01       	movw	r12, r18
     7fe:	7a 01       	movw	r14, r20
     800:	0c c0       	rjmp	.+24     	; 0x81a <bmp085_getrawpressure+0x230>
     802:	28 85       	ldd	r18, Y+8	; 0x08
     804:	39 85       	ldd	r19, Y+9	; 0x09
     806:	4a 85       	ldd	r20, Y+10	; 0x0a
     808:	5b 85       	ldd	r21, Y+11	; 0x0b
     80a:	0e 94 29 07 	call	0xe52	; 0xe52 <__udivmodsi4>
     80e:	69 01       	movw	r12, r18
     810:	7a 01       	movw	r14, r20
     812:	cc 0c       	add	r12, r12
     814:	dd 1c       	adc	r13, r13
     816:	ee 1c       	adc	r14, r14
     818:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
     81a:	99 27       	eor	r25, r25
     81c:	f7 fc       	sbrc	r15, 7
     81e:	9a 95       	dec	r25
     820:	8f 2d       	mov	r24, r15
     822:	7e 2d       	mov	r23, r14
     824:	6d 2d       	mov	r22, r13
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsi3>
     82e:	9b 01       	movw	r18, r22
     830:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
     832:	ae ed       	ldi	r26, 0xDE	; 222
     834:	bb e0       	ldi	r27, 0x0B	; 11
     836:	0e 94 79 07 	call	0xef2	; 0xef2 <__muluhisi3>
     83a:	4c 01       	movw	r8, r24
     83c:	bb 24       	eor	r11, r11
     83e:	97 fc       	sbrc	r9, 7
     840:	b0 94       	com	r11
     842:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     844:	a3 e4       	ldi	r26, 0x43	; 67
     846:	b3 ee       	ldi	r27, 0xE3	; 227
     848:	a7 01       	movw	r20, r14
     84a:	96 01       	movw	r18, r12
     84c:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulohisi3>
     850:	bb 27       	eor	r27, r27
     852:	97 fd       	sbrc	r25, 7
     854:	b0 95       	com	r27
     856:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     858:	88 0e       	add	r8, r24
     85a:	99 1e       	adc	r9, r25
     85c:	aa 1e       	adc	r10, r26
     85e:	bb 1e       	adc	r11, r27
     860:	3f ec       	ldi	r19, 0xCF	; 207
     862:	83 0e       	add	r8, r19
     864:	3e e0       	ldi	r19, 0x0E	; 14
     866:	93 1e       	adc	r9, r19
     868:	a1 1c       	adc	r10, r1
     86a:	b1 1c       	adc	r11, r1
     86c:	d5 01       	movw	r26, r10
     86e:	c4 01       	movw	r24, r8
     870:	68 94       	set
     872:	13 f8       	bld	r1, 3
     874:	b5 95       	asr	r27
     876:	a7 95       	ror	r26
     878:	97 95       	ror	r25
     87a:	87 95       	ror	r24
     87c:	16 94       	lsr	r1
     87e:	d1 f7       	brne	.-12     	; 0x874 <__stack+0x15>
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	6c 0d       	add	r22, r12
     886:	7d 1d       	adc	r23, r13
     888:	8e 1d       	adc	r24, r14
     88a:	9f 1d       	adc	r25, r15
     88c:	60 93 c4 00 	sts	0x00C4, r22
     890:	70 93 c5 00 	sts	0x00C5, r23
     894:	80 93 c6 00 	sts	0x00C6, r24
     898:	90 93 c7 00 	sts	0x00C7, r25

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
     89c:	0e 94 76 01 	call	0x2ec	; 0x2ec <bmp085_avaragefilter>
     8a0:	60 93 c4 00 	sts	0x00C4, r22
     8a4:	70 93 c5 00 	sts	0x00C5, r23
     8a8:	80 93 c6 00 	sts	0x00C6, r24
     8ac:	90 93 c7 00 	sts	0x00C7, r25
	#endif
}
     8b0:	2b 96       	adiw	r28, 0x0b	; 11
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	9f 90       	pop	r9
     8ce:	8f 90       	pop	r8
     8d0:	7f 90       	pop	r7
     8d2:	6f 90       	pop	r6
     8d4:	5f 90       	pop	r5
     8d6:	4f 90       	pop	r4
     8d8:	08 95       	ret

000008da <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
     8da:	0e 94 75 02 	call	0x4ea	; 0x4ea <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
     8de:	80 91 ca 00 	lds	r24, 0x00CA
     8e2:	90 91 cb 00 	lds	r25, 0x00CB
     8e6:	a0 91 cc 00 	lds	r26, 0x00CC
     8ea:	b0 91 cd 00 	lds	r27, 0x00CD
     8ee:	08 96       	adiw	r24, 0x08	; 8
     8f0:	a1 1d       	adc	r26, r1
     8f2:	b1 1d       	adc	r27, r1
     8f4:	bc 01       	movw	r22, r24
     8f6:	cd 01       	movw	r24, r26
     8f8:	68 94       	set
     8fa:	13 f8       	bld	r1, 3
     8fc:	95 95       	asr	r25
     8fe:	87 95       	ror	r24
     900:	77 95       	ror	r23
     902:	67 95       	ror	r22
     904:	16 94       	lsr	r1
     906:	d1 f7       	brne	.-12     	; 0x8fc <bmp085_gettemperature+0x22>
     908:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatsisf>
	temperature = temperature /10;
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e2       	ldi	r20, 0x20	; 32
     912:	51 e4       	ldi	r21, 0x41	; 65
     914:	0e 94 23 06 	call	0xc46	; 0xc46 <__divsf3>
	return temperature;
}
     918:	08 95       	ret

0000091a <bmp085_init>:
}

/*
 * init bmp085
 */
void bmp085_init() {
     91a:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
     91c:	0e 94 c6 00 	call	0x18c	; 0x18c <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	8a 95       	dec	r24
     924:	f1 f7       	brne	.-4      	; 0x922 <bmp085_init+0x8>
     926:	00 00       	nop
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
     928:	0e 94 ae 01 	call	0x35c	; 0x35c <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
     92c:	0e 94 75 02 	call	0x4ea	; 0x4ea <bmp085_getrawtemperature>
     930:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
     932:	0e 94 f5 02 	call	0x5ea	; 0x5ea <bmp085_getrawpressure>
     936:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     938:	e1 f7       	brne	.-8      	; 0x932 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <ds1307_init>:


/*
 * initialize the accellerometer
 */
void ds1307_init() {
     93e:	08 95       	ret

00000940 <ds1307_getdate>:
}

/*
 * get date
 */
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
     940:	8f 92       	push	r8
     942:	9f 92       	push	r9
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	6b 01       	movw	r12, r22
     95c:	5a 01       	movw	r10, r20
     95e:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
     960:	80 ed       	ldi	r24, 0xD0	; 208
     962:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_start_wait>
	i2c_write(0x00);//stop oscillator
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_write>
	i2c_stop();
     96c:	0e 94 09 01 	call	0x212	; 0x212 <i2c_stop>

	i2c_rep_start(DS1307_ADDR | I2C_READ);
     970:	81 ed       	ldi	r24, 0xD1	; 209
     972:	0e 94 06 01 	call	0x20c	; 0x20c <i2c_rep_start>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
     976:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_readAck>
     97a:	8f 77       	andi	r24, 0x7F	; 127

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     97c:	98 2f       	mov	r25, r24
     97e:	92 95       	swap	r25
     980:	9f 70       	andi	r25, 0x0F	; 15
     982:	29 2f       	mov	r18, r25
     984:	22 0f       	add	r18, r18
     986:	92 0f       	add	r25, r18
     988:	99 0f       	add	r25, r25
     98a:	89 1b       	sub	r24, r25
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
	i2c_write(0x00);//stop oscillator
	i2c_stop();

	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
     98c:	f7 01       	movw	r30, r14
     98e:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
     990:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     994:	98 2f       	mov	r25, r24
     996:	92 95       	swap	r25
     998:	9f 70       	andi	r25, 0x0F	; 15
     99a:	29 2f       	mov	r18, r25
     99c:	22 0f       	add	r18, r18
     99e:	92 0f       	add	r25, r18
     9a0:	99 0f       	add	r25, r25
     9a2:	89 1b       	sub	r24, r25
	i2c_write(0x00);//stop oscillator
	i2c_stop();

	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
     9a4:	f8 01       	movw	r30, r16
     9a6:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
     9a8:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     9ac:	98 2f       	mov	r25, r24
     9ae:	92 95       	swap	r25
     9b0:	9f 70       	andi	r25, 0x0F	; 15
     9b2:	29 2f       	mov	r18, r25
     9b4:	22 0f       	add	r18, r18
     9b6:	92 0f       	add	r25, r18
     9b8:	99 0f       	add	r25, r25
     9ba:	89 1b       	sub	r24, r25
	i2c_stop();

	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
     9bc:	f4 01       	movw	r30, r8
     9be:	80 83       	st	Z, r24
	i2c_readAck();
     9c0:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_readAck>
	*day = ds1307_bcd2dec(i2c_readAck());
     9c4:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     9c8:	98 2f       	mov	r25, r24
     9ca:	92 95       	swap	r25
     9cc:	9f 70       	andi	r25, 0x0F	; 15
     9ce:	29 2f       	mov	r18, r25
     9d0:	22 0f       	add	r18, r18
     9d2:	92 0f       	add	r25, r18
     9d4:	99 0f       	add	r25, r25
     9d6:	89 1b       	sub	r24, r25
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	*day = ds1307_bcd2dec(i2c_readAck());
     9d8:	f5 01       	movw	r30, r10
     9da:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
     9dc:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     9e0:	98 2f       	mov	r25, r24
     9e2:	92 95       	swap	r25
     9e4:	9f 70       	andi	r25, 0x0F	; 15
     9e6:	29 2f       	mov	r18, r25
     9e8:	22 0f       	add	r18, r18
     9ea:	92 0f       	add	r25, r18
     9ec:	99 0f       	add	r25, r25
     9ee:	89 1b       	sub	r24, r25
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	*day = ds1307_bcd2dec(i2c_readAck());
	*month = ds1307_bcd2dec(i2c_readAck());
     9f0:	f6 01       	movw	r30, r12
     9f2:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
     9f4:	0e 94 23 01 	call	0x246	; 0x246 <i2c_readNak>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     9f8:	98 2f       	mov	r25, r24
     9fa:	92 95       	swap	r25
     9fc:	9f 70       	andi	r25, 0x0F	; 15
     9fe:	29 2f       	mov	r18, r25
     a00:	22 0f       	add	r18, r18
     a02:	92 0f       	add	r25, r18
     a04:	99 0f       	add	r25, r25
     a06:	89 1b       	sub	r24, r25
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	*day = ds1307_bcd2dec(i2c_readAck());
	*month = ds1307_bcd2dec(i2c_readAck());
	*year = ds1307_bcd2dec(i2c_readNak());
     a08:	88 83       	st	Y, r24
	i2c_stop();
     a0a:	0e 94 09 01 	call	0x212	; 0x212 <i2c_stop>
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	bf 90       	pop	r11
     a20:	af 90       	pop	r10
     a22:	9f 90       	pop	r9
     a24:	8f 90       	pop	r8
     a26:	08 95       	ret

00000a28 <Flash_Enable>:

//***************************************************************************************************

void Flash_Enable()
{
	LCD_Control |= (1<<Enable);
     a28:	c2 9a       	sbi	0x18, 2	; 24
	asm volatile ("nop");
     a2a:	00 00       	nop
	asm volatile ("nop");
     a2c:	00 00       	nop
	LCD_Control &= ~(1<<Enable);
     a2e:	c2 98       	cbi	0x18, 2	; 24
     a30:	08 95       	ret

00000a32 <Check_if_LCD_is_busy>:

//***************************************************************************************************

void Check_if_LCD_is_busy()
{
	DataDir_DataBus = 0;			// set for input
     a32:	11 ba       	out	0x11, r1	; 17
	LCD_Control |= (1<<ReadWrite);	// read from the LCD
     a34:	c1 9a       	sbi	0x18, 1	; 24
	LCD_Control &= ~(1<<RS);		// set for command mode
     a36:	c0 98       	cbi	0x18, 0	; 24
	
		while(DataBus >=80)			// keep flashing Enable until the LCD is no longer busy
     a38:	82 b3       	in	r24, 0x12	; 18
     a3a:	80 35       	cpi	r24, 0x50	; 80
     a3c:	28 f0       	brcs	.+10     	; 0xa48 <Check_if_LCD_is_busy+0x16>
		{
		Flash_Enable();
     a3e:	0e 94 14 05 	call	0xa28	; 0xa28 <Flash_Enable>
{
	DataDir_DataBus = 0;			// set for input
	LCD_Control |= (1<<ReadWrite);	// read from the LCD
	LCD_Control &= ~(1<<RS);		// set for command mode
	
		while(DataBus >=80)			// keep flashing Enable until the LCD is no longer busy
     a42:	82 b3       	in	r24, 0x12	; 18
     a44:	80 35       	cpi	r24, 0x50	; 80
     a46:	d8 f7       	brcc	.-10     	; 0xa3e <Check_if_LCD_is_busy+0xc>
		{
		Flash_Enable();
		}

	DataDir_DataBus = 0xFF;			// set back to output
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	81 bb       	out	0x11, r24	; 17
     a4c:	08 95       	ret

00000a4e <Send_Command>:
}

//***************************************************************************************************

void Send_Command(unsigned char command)
{
     a4e:	cf 93       	push	r28
     a50:	c8 2f       	mov	r28, r24
	Check_if_LCD_is_busy();
     a52:	0e 94 19 05 	call	0xa32	; 0xa32 <Check_if_LCD_is_busy>
	DataBus = command;
     a56:	c2 bb       	out	0x12, r28	; 18
	LCD_Control &= ~((1<<RS) | (1<<ReadWrite));
     a58:	88 b3       	in	r24, 0x18	; 24
     a5a:	8c 7f       	andi	r24, 0xFC	; 252
     a5c:	88 bb       	out	0x18, r24	; 24
	Flash_Enable();
     a5e:	0e 94 14 05 	call	0xa28	; 0xa28 <Flash_Enable>
	DataBus = 0;
     a62:	12 ba       	out	0x12, r1	; 18
}
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <Initialize_LCD>:

//***************************************************************************************************

void Initialize_LCD()
{
	DataDir_LCD_Control |= (1<<Enable) | (1<<ReadWrite) | (1<<RS);
     a68:	87 b3       	in	r24, 0x17	; 23
     a6a:	87 60       	ori	r24, 0x07	; 7
     a6c:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6e:	8f e2       	ldi	r24, 0x2F	; 47
     a70:	95 e7       	ldi	r25, 0x75	; 117
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <Initialize_LCD+0xa>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <Initialize_LCD+0x10>
     a78:	00 00       	nop
	_delay_ms(15);
	Send_Command(0x01);			// clear the screen
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	0e 94 27 05 	call	0xa4e	; 0xa4e <Send_Command>
     a80:	8f e9       	ldi	r24, 0x9F	; 159
     a82:	9f e0       	ldi	r25, 0x0F	; 15
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <Initialize_LCD+0x1c>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <Initialize_LCD+0x22>
     a8a:	00 00       	nop
	_delay_ms(2);
	Send_Command(0x38);			// set for 8-bit mode // 0x20 for 4-bit?
     a8c:	88 e3       	ldi	r24, 0x38	; 56
     a8e:	0e 94 27 05 	call	0xa4e	; 0xa4e <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a92:	95 e8       	ldi	r25, 0x85	; 133
     a94:	9a 95       	dec	r25
     a96:	f1 f7       	brne	.-4      	; 0xa94 <Initialize_LCD+0x2c>
     a98:	00 00       	nop
	_delay_us(50);
	Send_Command(0b00001100);	// screen: display on, cursor off, blink off
     a9a:	8c e0       	ldi	r24, 0x0C	; 12
     a9c:	0e 94 27 05 	call	0xa4e	; 0xa4e <Send_Command>
     aa0:	85 e8       	ldi	r24, 0x85	; 133
     aa2:	8a 95       	dec	r24
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <Initialize_LCD+0x3a>
     aa6:	00 00       	nop
     aa8:	08 95       	ret

00000aaa <Send_Character>:
}

//***************************************************************************************************

void Send_Character(unsigned char character)
{
     aaa:	cf 93       	push	r28
     aac:	c8 2f       	mov	r28, r24
	Check_if_LCD_is_busy();
     aae:	0e 94 19 05 	call	0xa32	; 0xa32 <Check_if_LCD_is_busy>
	DataBus = character;
     ab2:	c2 bb       	out	0x12, r28	; 18
	LCD_Control &= ~(1<<ReadWrite);
     ab4:	c1 98       	cbi	0x18, 1	; 24
	LCD_Control |= (1<<RS);
     ab6:	c0 9a       	sbi	0x18, 0	; 24
	Flash_Enable();
     ab8:	0e 94 14 05 	call	0xa28	; 0xa28 <Flash_Enable>
	DataBus = 0;
     abc:	12 ba       	out	0x12, r1	; 18
}
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <Send_String>:

//***************************************************************************************************

void Send_String(char *stringOfCharacters)
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
	while(*stringOfCharacters>0)
     ac8:	88 81       	ld	r24, Y
     aca:	88 23       	and	r24, r24
     acc:	49 f0       	breq	.+18     	; 0xae0 <Send_String+0x1e>
     ace:	21 96       	adiw	r28, 0x01	; 1
	{
		
	Send_Character(*stringOfCharacters++);
     ad0:	0e 94 55 05 	call	0xaaa	; 0xaaa <Send_Character>
     ad4:	80 e5       	ldi	r24, 0x50	; 80
     ad6:	8a 95       	dec	r24
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <Send_String+0x14>

//***************************************************************************************************

void Send_String(char *stringOfCharacters)
{
	while(*stringOfCharacters>0)
     ada:	89 91       	ld	r24, Y+
     adc:	81 11       	cpse	r24, r1
     ade:	f8 cf       	rjmp	.-16     	; 0xad0 <Send_String+0xe>
	{
		
	Send_Character(*stringOfCharacters++);
	_delay_us(30);
	}
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <Send_Int>:

//***************************************************************************************************

void Send_Int(uint16_t var)
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	00 d0       	rcall	.+0      	; 0xaec <Send_Int+0x6>
     aec:	00 d0       	rcall	.+0      	; 0xaee <Send_Int+0x8>
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <Send_Int+0xa>
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     af4:	4a e0       	ldi	r20, 0x0A	; 10
     af6:	be 01       	movw	r22, r28
     af8:	6f 5f       	subi	r22, 0xFF	; 255
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__itoa_ncheck>
	char var_as_string[6];			// string that will store the number
	itoa(var, var_as_string, 10);	// base: 2 for binary, 10 for decimal, 16 for hex
	Send_String(var_as_string);
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
}
     b08:	26 96       	adiw	r28, 0x06	; 6
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <Send_Double>:

//***************************************************************************************************

void Send_Double(double var, uint8_t width, uint8_t precision)
{	
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
	char var_as_string[width];							// string that will store the number
	dtostrf(var, width, precision, var_as_string);		// width: total length of the number incl decimals and sign
														// precision: the number of digits after decimal point
	Send_String(var_as_string);
}
     b2e:	cd b6       	in	r12, 0x3d	; 61
     b30:	de b6       	in	r13, 0x3e	; 62

//***************************************************************************************************

void Send_Double(double var, uint8_t width, uint8_t precision)
{	
	char var_as_string[width];							// string that will store the number
     b32:	ed b7       	in	r30, 0x3d	; 61
     b34:	fe b7       	in	r31, 0x3e	; 62
     b36:	e4 1b       	sub	r30, r20
     b38:	f1 09       	sbc	r31, r1
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	fe bf       	out	0x3e, r31	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	ed bf       	out	0x3d, r30	; 61
     b44:	31 96       	adiw	r30, 0x01	; 1
     b46:	7f 01       	movw	r14, r30
	dtostrf(var, width, precision, var_as_string);		// width: total length of the number incl decimals and sign
     b48:	8f 01       	movw	r16, r30
     b4a:	0e 94 8c 07 	call	0xf18	; 0xf18 <dtostrf>
														// precision: the number of digits after decimal point
	Send_String(var_as_string);
     b4e:	c7 01       	movw	r24, r14
     b50:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
}
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de be       	out	0x3e, r13	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd be       	out	0x3d, r12	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	08 95       	ret

00000b70 <GotoLCD_Location>:

//***************************************************************************************************

void GotoLCD_Location(uint8_t x, uint8_t y)
{
	Send_Command(0x80 + firstColumnPos[y-1] + (x-1));
     b70:	81 58       	subi	r24, 0x81	; 129
     b72:	e6 2f       	mov	r30, r22
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	e1 5a       	subi	r30, 0xA1	; 161
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	90 81       	ld	r25, Z
     b7c:	89 0f       	add	r24, r25
     b7e:	0e 94 27 05 	call	0xa4e	; 0xa4e <Send_Command>
     b82:	80 e5       	ldi	r24, 0x50	; 80
     b84:	8a 95       	dec	r24
     b86:	f1 f7       	brne	.-4      	; 0xb84 <GotoLCD_Location+0x14>
     b88:	08 95       	ret

00000b8a <main>:
#include <util/delay.h>
#include <math.h>
#include "I2Cfncs.h"
#include "LCD.h"

int main(void) {
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <main+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <main+0x8>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <main+0xa>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
	double l;
	uint8_t time[6];
	//init bmp085
	bmp085_init();
     b98:	0e 94 8d 04 	call	0x91a	; 0x91a <bmp085_init>
	ds1307_init();
     b9c:	0e 94 9f 04 	call	0x93e	; 0x93e <ds1307_init>
	Initialize_LCD();
     ba0:	0e 94 34 05 	call	0xa68	; 0xa68 <Initialize_LCD>
	
	//main loop
	
	while(1)
	{
	ds1307_getdate(&time[0], &time[1], &time[2], &time[3], &time[4], &time[5]);
     ba4:	ce 01       	movw	r24, r28
     ba6:	06 96       	adiw	r24, 0x06	; 6
     ba8:	7c 01       	movw	r14, r24
     baa:	8e 01       	movw	r16, r28
     bac:	0b 5f       	subi	r16, 0xFB	; 251
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	9e 01       	movw	r18, r28
     bb2:	2c 5f       	subi	r18, 0xFC	; 252
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	ae 01       	movw	r20, r28
     bb8:	4d 5f       	subi	r20, 0xFD	; 253
     bba:	5f 4f       	sbci	r21, 0xFF	; 255
     bbc:	be 01       	movw	r22, r28
     bbe:	6e 5f       	subi	r22, 0xFE	; 254
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	05 97       	sbiw	r24, 0x05	; 5
     bc4:	0e 94 a0 04 	call	0x940	; 0x940 <ds1307_getdate>
	GotoLCD_Location(1,1);
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	0e 94 b8 05 	call	0xb70	; 0xb70 <GotoLCD_Location>
	
	
		Send_String("Time:");
     bd0:	84 e6       	ldi	r24, 0x64	; 100
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
		Send_Int(time[0]);
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 73 05 	call	0xae6	; 0xae6 <Send_Int>
		Send_String(" ");
     be0:	8a e6       	ldi	r24, 0x6A	; 106
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
		Send_Int(time[1]);
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 73 05 	call	0xae6	; 0xae6 <Send_Int>
		Send_String(" ");
     bf0:	8a e6       	ldi	r24, 0x6A	; 106
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
		Send_Int(time[2]);
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 73 05 	call	0xae6	; 0xae6 <Send_Int>
		GotoLCD_Location(1,2);
     c00:	62 e0       	ldi	r22, 0x02	; 2
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 b8 05 	call	0xb70	; 0xb70 <GotoLCD_Location>
		Send_Int(time[3]);
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 73 05 	call	0xae6	; 0xae6 <Send_Int>
		Send_String(" ");
     c10:	8a e6       	ldi	r24, 0x6A	; 106
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
		Send_Int(time[4]);
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 73 05 	call	0xae6	; 0xae6 <Send_Int>
		Send_String(" ");
     c20:	8a e6       	ldi	r24, 0x6A	; 106
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
		Send_Int(time[5]);
     c28:	8e 81       	ldd	r24, Y+6	; 0x06
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 73 05 	call	0xae6	; 0xae6 <Send_Int>
		Send_String(" ");
     c30:	8a e6       	ldi	r24, 0x6A	; 106
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 61 05 	call	0xac2	; 0xac2 <Send_String>
l = bmp085_gettemperature();
     c38:	0e 94 6d 04 	call	0x8da	; 0x8da <bmp085_gettemperature>
		Send_Double(l,2,2);
     c3c:	22 e0       	ldi	r18, 0x02	; 2
     c3e:	42 e0       	ldi	r20, 0x02	; 2
     c40:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Send_Double>
     c44:	af cf       	rjmp	.-162    	; 0xba4 <main+0x1a>

00000c46 <__divsf3>:
     c46:	0c d0       	rcall	.+24     	; 0xc60 <__divsf3x>
     c48:	ba c0       	rjmp	.+372    	; 0xdbe <__fp_round>
     c4a:	b2 d0       	rcall	.+356    	; 0xdb0 <__fp_pscB>
     c4c:	40 f0       	brcs	.+16     	; 0xc5e <__divsf3+0x18>
     c4e:	a9 d0       	rcall	.+338    	; 0xda2 <__fp_pscA>
     c50:	30 f0       	brcs	.+12     	; 0xc5e <__divsf3+0x18>
     c52:	21 f4       	brne	.+8      	; 0xc5c <__divsf3+0x16>
     c54:	5f 3f       	cpi	r21, 0xFF	; 255
     c56:	19 f0       	breq	.+6      	; 0xc5e <__divsf3+0x18>
     c58:	9b c0       	rjmp	.+310    	; 0xd90 <__fp_inf>
     c5a:	51 11       	cpse	r21, r1
     c5c:	e4 c0       	rjmp	.+456    	; 0xe26 <__fp_szero>
     c5e:	9e c0       	rjmp	.+316    	; 0xd9c <__fp_nan>

00000c60 <__divsf3x>:
     c60:	bf d0       	rcall	.+382    	; 0xde0 <__fp_split3>
     c62:	98 f3       	brcs	.-26     	; 0xc4a <__divsf3+0x4>

00000c64 <__divsf3_pse>:
     c64:	99 23       	and	r25, r25
     c66:	c9 f3       	breq	.-14     	; 0xc5a <__divsf3+0x14>
     c68:	55 23       	and	r21, r21
     c6a:	b1 f3       	breq	.-20     	; 0xc58 <__divsf3+0x12>
     c6c:	95 1b       	sub	r25, r21
     c6e:	55 0b       	sbc	r21, r21
     c70:	bb 27       	eor	r27, r27
     c72:	aa 27       	eor	r26, r26
     c74:	62 17       	cp	r22, r18
     c76:	73 07       	cpc	r23, r19
     c78:	84 07       	cpc	r24, r20
     c7a:	38 f0       	brcs	.+14     	; 0xc8a <__divsf3_pse+0x26>
     c7c:	9f 5f       	subi	r25, 0xFF	; 255
     c7e:	5f 4f       	sbci	r21, 0xFF	; 255
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	aa 1f       	adc	r26, r26
     c88:	a9 f3       	breq	.-22     	; 0xc74 <__divsf3_pse+0x10>
     c8a:	33 d0       	rcall	.+102    	; 0xcf2 <__divsf3_pse+0x8e>
     c8c:	0e 2e       	mov	r0, r30
     c8e:	3a f0       	brmi	.+14     	; 0xc9e <__divsf3_pse+0x3a>
     c90:	e0 e8       	ldi	r30, 0x80	; 128
     c92:	30 d0       	rcall	.+96     	; 0xcf4 <__divsf3_pse+0x90>
     c94:	91 50       	subi	r25, 0x01	; 1
     c96:	50 40       	sbci	r21, 0x00	; 0
     c98:	e6 95       	lsr	r30
     c9a:	00 1c       	adc	r0, r0
     c9c:	ca f7       	brpl	.-14     	; 0xc90 <__divsf3_pse+0x2c>
     c9e:	29 d0       	rcall	.+82     	; 0xcf2 <__divsf3_pse+0x8e>
     ca0:	fe 2f       	mov	r31, r30
     ca2:	27 d0       	rcall	.+78     	; 0xcf2 <__divsf3_pse+0x8e>
     ca4:	66 0f       	add	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	88 1f       	adc	r24, r24
     caa:	bb 1f       	adc	r27, r27
     cac:	26 17       	cp	r18, r22
     cae:	37 07       	cpc	r19, r23
     cb0:	48 07       	cpc	r20, r24
     cb2:	ab 07       	cpc	r26, r27
     cb4:	b0 e8       	ldi	r27, 0x80	; 128
     cb6:	09 f0       	breq	.+2      	; 0xcba <__divsf3_pse+0x56>
     cb8:	bb 0b       	sbc	r27, r27
     cba:	80 2d       	mov	r24, r0
     cbc:	bf 01       	movw	r22, r30
     cbe:	ff 27       	eor	r31, r31
     cc0:	93 58       	subi	r25, 0x83	; 131
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	2a f0       	brmi	.+10     	; 0xcd0 <__divsf3_pse+0x6c>
     cc6:	9e 3f       	cpi	r25, 0xFE	; 254
     cc8:	51 05       	cpc	r21, r1
     cca:	68 f0       	brcs	.+26     	; 0xce6 <__divsf3_pse+0x82>
     ccc:	61 c0       	rjmp	.+194    	; 0xd90 <__fp_inf>
     cce:	ab c0       	rjmp	.+342    	; 0xe26 <__fp_szero>
     cd0:	5f 3f       	cpi	r21, 0xFF	; 255
     cd2:	ec f3       	brlt	.-6      	; 0xcce <__divsf3_pse+0x6a>
     cd4:	98 3e       	cpi	r25, 0xE8	; 232
     cd6:	dc f3       	brlt	.-10     	; 0xcce <__divsf3_pse+0x6a>
     cd8:	86 95       	lsr	r24
     cda:	77 95       	ror	r23
     cdc:	67 95       	ror	r22
     cde:	b7 95       	ror	r27
     ce0:	f7 95       	ror	r31
     ce2:	9f 5f       	subi	r25, 0xFF	; 255
     ce4:	c9 f7       	brne	.-14     	; 0xcd8 <__divsf3_pse+0x74>
     ce6:	88 0f       	add	r24, r24
     ce8:	91 1d       	adc	r25, r1
     cea:	96 95       	lsr	r25
     cec:	87 95       	ror	r24
     cee:	97 f9       	bld	r25, 7
     cf0:	08 95       	ret
     cf2:	e1 e0       	ldi	r30, 0x01	; 1
     cf4:	66 0f       	add	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	88 1f       	adc	r24, r24
     cfa:	bb 1f       	adc	r27, r27
     cfc:	62 17       	cp	r22, r18
     cfe:	73 07       	cpc	r23, r19
     d00:	84 07       	cpc	r24, r20
     d02:	ba 07       	cpc	r27, r26
     d04:	20 f0       	brcs	.+8      	; 0xd0e <__divsf3_pse+0xaa>
     d06:	62 1b       	sub	r22, r18
     d08:	73 0b       	sbc	r23, r19
     d0a:	84 0b       	sbc	r24, r20
     d0c:	ba 0b       	sbc	r27, r26
     d0e:	ee 1f       	adc	r30, r30
     d10:	88 f7       	brcc	.-30     	; 0xcf4 <__divsf3_pse+0x90>
     d12:	e0 95       	com	r30
     d14:	08 95       	ret

00000d16 <__floatunsisf>:
     d16:	e8 94       	clt
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <__floatsisf+0x12>

00000d1a <__floatsisf>:
     d1a:	97 fb       	bst	r25, 7
     d1c:	3e f4       	brtc	.+14     	; 0xd2c <__floatsisf+0x12>
     d1e:	90 95       	com	r25
     d20:	80 95       	com	r24
     d22:	70 95       	com	r23
     d24:	61 95       	neg	r22
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	8f 4f       	sbci	r24, 0xFF	; 255
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	99 23       	and	r25, r25
     d2e:	a9 f0       	breq	.+42     	; 0xd5a <__floatsisf+0x40>
     d30:	f9 2f       	mov	r31, r25
     d32:	96 e9       	ldi	r25, 0x96	; 150
     d34:	bb 27       	eor	r27, r27
     d36:	93 95       	inc	r25
     d38:	f6 95       	lsr	r31
     d3a:	87 95       	ror	r24
     d3c:	77 95       	ror	r23
     d3e:	67 95       	ror	r22
     d40:	b7 95       	ror	r27
     d42:	f1 11       	cpse	r31, r1
     d44:	f8 cf       	rjmp	.-16     	; 0xd36 <__floatsisf+0x1c>
     d46:	fa f4       	brpl	.+62     	; 0xd86 <__floatsisf+0x6c>
     d48:	bb 0f       	add	r27, r27
     d4a:	11 f4       	brne	.+4      	; 0xd50 <__floatsisf+0x36>
     d4c:	60 ff       	sbrs	r22, 0
     d4e:	1b c0       	rjmp	.+54     	; 0xd86 <__floatsisf+0x6c>
     d50:	6f 5f       	subi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	16 c0       	rjmp	.+44     	; 0xd86 <__floatsisf+0x6c>
     d5a:	88 23       	and	r24, r24
     d5c:	11 f0       	breq	.+4      	; 0xd62 <__floatsisf+0x48>
     d5e:	96 e9       	ldi	r25, 0x96	; 150
     d60:	11 c0       	rjmp	.+34     	; 0xd84 <__floatsisf+0x6a>
     d62:	77 23       	and	r23, r23
     d64:	21 f0       	breq	.+8      	; 0xd6e <__floatsisf+0x54>
     d66:	9e e8       	ldi	r25, 0x8E	; 142
     d68:	87 2f       	mov	r24, r23
     d6a:	76 2f       	mov	r23, r22
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <__floatsisf+0x5e>
     d6e:	66 23       	and	r22, r22
     d70:	71 f0       	breq	.+28     	; 0xd8e <__floatsisf+0x74>
     d72:	96 e8       	ldi	r25, 0x86	; 134
     d74:	86 2f       	mov	r24, r22
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	2a f0       	brmi	.+10     	; 0xd86 <__floatsisf+0x6c>
     d7c:	9a 95       	dec	r25
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	da f7       	brpl	.-10     	; 0xd7c <__floatsisf+0x62>
     d86:	88 0f       	add	r24, r24
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	97 f9       	bld	r25, 7
     d8e:	08 95       	ret

00000d90 <__fp_inf>:
     d90:	97 f9       	bld	r25, 7
     d92:	9f 67       	ori	r25, 0x7F	; 127
     d94:	80 e8       	ldi	r24, 0x80	; 128
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	08 95       	ret

00000d9c <__fp_nan>:
     d9c:	9f ef       	ldi	r25, 0xFF	; 255
     d9e:	80 ec       	ldi	r24, 0xC0	; 192
     da0:	08 95       	ret

00000da2 <__fp_pscA>:
     da2:	00 24       	eor	r0, r0
     da4:	0a 94       	dec	r0
     da6:	16 16       	cp	r1, r22
     da8:	17 06       	cpc	r1, r23
     daa:	18 06       	cpc	r1, r24
     dac:	09 06       	cpc	r0, r25
     dae:	08 95       	ret

00000db0 <__fp_pscB>:
     db0:	00 24       	eor	r0, r0
     db2:	0a 94       	dec	r0
     db4:	12 16       	cp	r1, r18
     db6:	13 06       	cpc	r1, r19
     db8:	14 06       	cpc	r1, r20
     dba:	05 06       	cpc	r0, r21
     dbc:	08 95       	ret

00000dbe <__fp_round>:
     dbe:	09 2e       	mov	r0, r25
     dc0:	03 94       	inc	r0
     dc2:	00 0c       	add	r0, r0
     dc4:	11 f4       	brne	.+4      	; 0xdca <__fp_round+0xc>
     dc6:	88 23       	and	r24, r24
     dc8:	52 f0       	brmi	.+20     	; 0xdde <__fp_round+0x20>
     dca:	bb 0f       	add	r27, r27
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fp_round+0x20>
     dce:	bf 2b       	or	r27, r31
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <__fp_round+0x18>
     dd2:	60 ff       	sbrs	r22, 0
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <__fp_round+0x20>
     dd6:	6f 5f       	subi	r22, 0xFF	; 255
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	8f 4f       	sbci	r24, 0xFF	; 255
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	08 95       	ret

00000de0 <__fp_split3>:
     de0:	57 fd       	sbrc	r21, 7
     de2:	90 58       	subi	r25, 0x80	; 128
     de4:	44 0f       	add	r20, r20
     de6:	55 1f       	adc	r21, r21
     de8:	59 f0       	breq	.+22     	; 0xe00 <__fp_splitA+0x10>
     dea:	5f 3f       	cpi	r21, 0xFF	; 255
     dec:	71 f0       	breq	.+28     	; 0xe0a <__fp_splitA+0x1a>
     dee:	47 95       	ror	r20

00000df0 <__fp_splitA>:
     df0:	88 0f       	add	r24, r24
     df2:	97 fb       	bst	r25, 7
     df4:	99 1f       	adc	r25, r25
     df6:	61 f0       	breq	.+24     	; 0xe10 <__fp_splitA+0x20>
     df8:	9f 3f       	cpi	r25, 0xFF	; 255
     dfa:	79 f0       	breq	.+30     	; 0xe1a <__fp_splitA+0x2a>
     dfc:	87 95       	ror	r24
     dfe:	08 95       	ret
     e00:	12 16       	cp	r1, r18
     e02:	13 06       	cpc	r1, r19
     e04:	14 06       	cpc	r1, r20
     e06:	55 1f       	adc	r21, r21
     e08:	f2 cf       	rjmp	.-28     	; 0xdee <__fp_split3+0xe>
     e0a:	46 95       	lsr	r20
     e0c:	f1 df       	rcall	.-30     	; 0xdf0 <__fp_splitA>
     e0e:	08 c0       	rjmp	.+16     	; 0xe20 <__fp_splitA+0x30>
     e10:	16 16       	cp	r1, r22
     e12:	17 06       	cpc	r1, r23
     e14:	18 06       	cpc	r1, r24
     e16:	99 1f       	adc	r25, r25
     e18:	f1 cf       	rjmp	.-30     	; 0xdfc <__fp_splitA+0xc>
     e1a:	86 95       	lsr	r24
     e1c:	71 05       	cpc	r23, r1
     e1e:	61 05       	cpc	r22, r1
     e20:	08 94       	sec
     e22:	08 95       	ret

00000e24 <__fp_zero>:
     e24:	e8 94       	clt

00000e26 <__fp_szero>:
     e26:	bb 27       	eor	r27, r27
     e28:	66 27       	eor	r22, r22
     e2a:	77 27       	eor	r23, r23
     e2c:	cb 01       	movw	r24, r22
     e2e:	97 f9       	bld	r25, 7
     e30:	08 95       	ret

00000e32 <__mulsi3>:
     e32:	db 01       	movw	r26, r22
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	0e 94 79 07 	call	0xef2	; 0xef2 <__muluhisi3>
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	a2 9f       	mul	r26, r18
     e42:	80 0d       	add	r24, r0
     e44:	91 1d       	adc	r25, r1
     e46:	a3 9f       	mul	r26, r19
     e48:	90 0d       	add	r25, r0
     e4a:	b2 9f       	mul	r27, r18
     e4c:	90 0d       	add	r25, r0
     e4e:	11 24       	eor	r1, r1
     e50:	08 95       	ret

00000e52 <__udivmodsi4>:
     e52:	a1 e2       	ldi	r26, 0x21	; 33
     e54:	1a 2e       	mov	r1, r26
     e56:	aa 1b       	sub	r26, r26
     e58:	bb 1b       	sub	r27, r27
     e5a:	fd 01       	movw	r30, r26
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__udivmodsi4_ep>

00000e5e <__udivmodsi4_loop>:
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	ee 1f       	adc	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	a2 17       	cp	r26, r18
     e68:	b3 07       	cpc	r27, r19
     e6a:	e4 07       	cpc	r30, r20
     e6c:	f5 07       	cpc	r31, r21
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <__udivmodsi4_ep>
     e70:	a2 1b       	sub	r26, r18
     e72:	b3 0b       	sbc	r27, r19
     e74:	e4 0b       	sbc	r30, r20
     e76:	f5 0b       	sbc	r31, r21

00000e78 <__udivmodsi4_ep>:
     e78:	66 1f       	adc	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 1f       	adc	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	1a 94       	dec	r1
     e82:	69 f7       	brne	.-38     	; 0xe5e <__udivmodsi4_loop>
     e84:	60 95       	com	r22
     e86:	70 95       	com	r23
     e88:	80 95       	com	r24
     e8a:	90 95       	com	r25
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
     e90:	bd 01       	movw	r22, r26
     e92:	cf 01       	movw	r24, r30
     e94:	08 95       	ret

00000e96 <__divmodsi4>:
     e96:	05 2e       	mov	r0, r21
     e98:	97 fb       	bst	r25, 7
     e9a:	1e f4       	brtc	.+6      	; 0xea2 <__divmodsi4+0xc>
     e9c:	00 94       	com	r0
     e9e:	0e 94 62 07 	call	0xec4	; 0xec4 <__negsi2>
     ea2:	57 fd       	sbrc	r21, 7
     ea4:	07 d0       	rcall	.+14     	; 0xeb4 <__divmodsi4_neg2>
     ea6:	0e 94 29 07 	call	0xe52	; 0xe52 <__udivmodsi4>
     eaa:	07 fc       	sbrc	r0, 7
     eac:	03 d0       	rcall	.+6      	; 0xeb4 <__divmodsi4_neg2>
     eae:	4e f4       	brtc	.+18     	; 0xec2 <__divmodsi4_exit>
     eb0:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__negsi2>

00000eb4 <__divmodsi4_neg2>:
     eb4:	50 95       	com	r21
     eb6:	40 95       	com	r20
     eb8:	30 95       	com	r19
     eba:	21 95       	neg	r18
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	4f 4f       	sbci	r20, 0xFF	; 255
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255

00000ec2 <__divmodsi4_exit>:
     ec2:	08 95       	ret

00000ec4 <__negsi2>:
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	08 95       	ret

00000ed4 <__umulhisi3>:
     ed4:	a2 9f       	mul	r26, r18
     ed6:	b0 01       	movw	r22, r0
     ed8:	b3 9f       	mul	r27, r19
     eda:	c0 01       	movw	r24, r0
     edc:	a3 9f       	mul	r26, r19
     ede:	70 0d       	add	r23, r0
     ee0:	81 1d       	adc	r24, r1
     ee2:	11 24       	eor	r1, r1
     ee4:	91 1d       	adc	r25, r1
     ee6:	b2 9f       	mul	r27, r18
     ee8:	70 0d       	add	r23, r0
     eea:	81 1d       	adc	r24, r1
     eec:	11 24       	eor	r1, r1
     eee:	91 1d       	adc	r25, r1
     ef0:	08 95       	ret

00000ef2 <__muluhisi3>:
     ef2:	0e 94 6a 07 	call	0xed4	; 0xed4 <__umulhisi3>
     ef6:	a5 9f       	mul	r26, r21
     ef8:	90 0d       	add	r25, r0
     efa:	b4 9f       	mul	r27, r20
     efc:	90 0d       	add	r25, r0
     efe:	a4 9f       	mul	r26, r20
     f00:	80 0d       	add	r24, r0
     f02:	91 1d       	adc	r25, r1
     f04:	11 24       	eor	r1, r1
     f06:	08 95       	ret

00000f08 <__mulshisi3>:
     f08:	b7 ff       	sbrs	r27, 7
     f0a:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__muluhisi3>

00000f0e <__mulohisi3>:
     f0e:	0e 94 79 07 	call	0xef2	; 0xef2 <__muluhisi3>
     f12:	82 1b       	sub	r24, r18
     f14:	93 0b       	sbc	r25, r19
     f16:	08 95       	ret

00000f18 <dtostrf>:
     f18:	ef 92       	push	r14
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	e8 01       	movw	r28, r16
     f24:	47 ff       	sbrs	r20, 7
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <dtostrf+0x14>
     f28:	34 e1       	ldi	r19, 0x14	; 20
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <dtostrf+0x16>
     f2c:	34 e0       	ldi	r19, 0x04	; 4
     f2e:	e4 2f       	mov	r30, r20
     f30:	ff 27       	eor	r31, r31
     f32:	e7 fd       	sbrc	r30, 7
     f34:	f0 95       	com	r31
     f36:	f7 ff       	sbrs	r31, 7
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <dtostrf+0x28>
     f3a:	f1 95       	neg	r31
     f3c:	e1 95       	neg	r30
     f3e:	f1 09       	sbc	r31, r1
     f40:	e3 2e       	mov	r14, r19
     f42:	02 2f       	mov	r16, r18
     f44:	2e 2f       	mov	r18, r30
     f46:	ae 01       	movw	r20, r28
     f48:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <dtoa_prf>
     f4c:	ce 01       	movw	r24, r28
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ef 90       	pop	r14
     f58:	08 95       	ret

00000f5a <__itoa_ncheck>:
     f5a:	bb 27       	eor	r27, r27
     f5c:	4a 30       	cpi	r20, 0x0A	; 10
     f5e:	31 f4       	brne	.+12     	; 0xf6c <__itoa_ncheck+0x12>
     f60:	99 23       	and	r25, r25
     f62:	22 f4       	brpl	.+8      	; 0xf6c <__itoa_ncheck+0x12>
     f64:	bd e2       	ldi	r27, 0x2D	; 45
     f66:	90 95       	com	r25
     f68:	81 95       	neg	r24
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__utoa_common>

00000f70 <__utoa_ncheck>:
     f70:	bb 27       	eor	r27, r27

00000f72 <__utoa_common>:
     f72:	fb 01       	movw	r30, r22
     f74:	55 27       	eor	r21, r21
     f76:	aa 27       	eor	r26, r26
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	aa 1f       	adc	r26, r26
     f7e:	a4 17       	cp	r26, r20
     f80:	10 f0       	brcs	.+4      	; 0xf86 <__utoa_common+0x14>
     f82:	a4 1b       	sub	r26, r20
     f84:	83 95       	inc	r24
     f86:	50 51       	subi	r21, 0x10	; 16
     f88:	b9 f7       	brne	.-18     	; 0xf78 <__utoa_common+0x6>
     f8a:	a0 5d       	subi	r26, 0xD0	; 208
     f8c:	aa 33       	cpi	r26, 0x3A	; 58
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <__utoa_common+0x20>
     f90:	a9 5d       	subi	r26, 0xD9	; 217
     f92:	a1 93       	st	Z+, r26
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	79 f7       	brne	.-34     	; 0xf76 <__utoa_common+0x4>
     f98:	b1 11       	cpse	r27, r1
     f9a:	b1 93       	st	Z+, r27
     f9c:	11 92       	st	Z+, r1
     f9e:	cb 01       	movw	r24, r22
     fa0:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <strrev>

00000fa4 <dtoa_prf>:
     fa4:	6f 92       	push	r6
     fa6:	7f 92       	push	r7
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	29 97       	sbiw	r28, 0x09	; 9
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	6a 01       	movw	r12, r20
     fd0:	b2 2e       	mov	r11, r18
     fd2:	10 2f       	mov	r17, r16
     fd4:	0c 33       	cpi	r16, 0x3C	; 60
     fd6:	20 f4       	brcc	.+8      	; 0xfe0 <dtoa_prf+0x3c>
     fd8:	ff 24       	eor	r15, r15
     fda:	f3 94       	inc	r15
     fdc:	f0 0e       	add	r15, r16
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <dtoa_prf+0x40>
     fe0:	4c e3       	ldi	r20, 0x3C	; 60
     fe2:	f4 2e       	mov	r15, r20
     fe4:	0f 2d       	mov	r16, r15
     fe6:	27 e0       	ldi	r18, 0x07	; 7
     fe8:	ae 01       	movw	r20, r28
     fea:	4f 5f       	subi	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__ftoa_engine>
     ff2:	79 81       	ldd	r23, Y+1	; 0x01
     ff4:	27 2f       	mov	r18, r23
     ff6:	29 70       	andi	r18, 0x09	; 9
     ff8:	21 30       	cpi	r18, 0x01	; 1
     ffa:	31 f0       	breq	.+12     	; 0x1008 <dtoa_prf+0x64>
     ffc:	e1 fc       	sbrc	r14, 1
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <dtoa_prf+0x68>
    1000:	e0 fc       	sbrc	r14, 0
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <dtoa_prf+0x6c>
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <dtoa_prf+0x6e>
    1008:	6d e2       	ldi	r22, 0x2D	; 45
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <dtoa_prf+0x6e>
    100c:	6b e2       	ldi	r22, 0x2B	; 43
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <dtoa_prf+0x6e>
    1010:	60 e2       	ldi	r22, 0x20	; 32
    1012:	ae 2d       	mov	r26, r14
    1014:	a0 71       	andi	r26, 0x10	; 16
    1016:	73 ff       	sbrs	r23, 3
    1018:	36 c0       	rjmp	.+108    	; 0x1086 <dtoa_prf+0xe2>
    101a:	66 23       	and	r22, r22
    101c:	11 f0       	breq	.+4      	; 0x1022 <dtoa_prf+0x7e>
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <dtoa_prf+0x80>
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	8b 15       	cp	r24, r11
    1026:	10 f4       	brcc	.+4      	; 0x102c <dtoa_prf+0x88>
    1028:	b8 1a       	sub	r11, r24
    102a:	01 c0       	rjmp	.+2      	; 0x102e <dtoa_prf+0x8a>
    102c:	b1 2c       	mov	r11, r1
    102e:	a1 11       	cpse	r26, r1
    1030:	0b c0       	rjmp	.+22     	; 0x1048 <dtoa_prf+0xa4>
    1032:	f6 01       	movw	r30, r12
    1034:	8b 2d       	mov	r24, r11
    1036:	90 e2       	ldi	r25, 0x20	; 32
    1038:	88 23       	and	r24, r24
    103a:	19 f0       	breq	.+6      	; 0x1042 <dtoa_prf+0x9e>
    103c:	91 93       	st	Z+, r25
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	fb cf       	rjmp	.-10     	; 0x1038 <dtoa_prf+0x94>
    1042:	cb 0c       	add	r12, r11
    1044:	d1 1c       	adc	r13, r1
    1046:	b1 2c       	mov	r11, r1
    1048:	66 23       	and	r22, r22
    104a:	31 f0       	breq	.+12     	; 0x1058 <dtoa_prf+0xb4>
    104c:	f6 01       	movw	r30, r12
    104e:	60 83       	st	Z, r22
    1050:	96 01       	movw	r18, r12
    1052:	2f 5f       	subi	r18, 0xFF	; 255
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	69 01       	movw	r12, r18
    1058:	c6 01       	movw	r24, r12
    105a:	03 96       	adiw	r24, 0x03	; 3
    105c:	e2 fe       	sbrs	r14, 2
    105e:	05 c0       	rjmp	.+10     	; 0x106a <dtoa_prf+0xc6>
    1060:	2e e4       	ldi	r18, 0x4E	; 78
    1062:	f6 01       	movw	r30, r12
    1064:	20 83       	st	Z, r18
    1066:	31 e4       	ldi	r19, 0x41	; 65
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <dtoa_prf+0xce>
    106a:	2e e6       	ldi	r18, 0x6E	; 110
    106c:	f6 01       	movw	r30, r12
    106e:	20 83       	st	Z, r18
    1070:	31 e6       	ldi	r19, 0x61	; 97
    1072:	31 83       	std	Z+1, r19	; 0x01
    1074:	22 83       	std	Z+2, r18	; 0x02
    1076:	fc 01       	movw	r30, r24
    1078:	2b 2d       	mov	r18, r11
    107a:	30 e2       	ldi	r19, 0x20	; 32
    107c:	22 23       	and	r18, r18
    107e:	f1 f1       	breq	.+124    	; 0x10fc <dtoa_prf+0x158>
    1080:	31 93       	st	Z+, r19
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	fb cf       	rjmp	.-10     	; 0x107c <dtoa_prf+0xd8>
    1086:	72 ff       	sbrs	r23, 2
    1088:	40 c0       	rjmp	.+128    	; 0x110a <dtoa_prf+0x166>
    108a:	66 23       	and	r22, r22
    108c:	11 f0       	breq	.+4      	; 0x1092 <dtoa_prf+0xee>
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <dtoa_prf+0xf0>
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	8b 15       	cp	r24, r11
    1096:	10 f4       	brcc	.+4      	; 0x109c <dtoa_prf+0xf8>
    1098:	b8 1a       	sub	r11, r24
    109a:	01 c0       	rjmp	.+2      	; 0x109e <dtoa_prf+0xfa>
    109c:	b1 2c       	mov	r11, r1
    109e:	a1 11       	cpse	r26, r1
    10a0:	0b c0       	rjmp	.+22     	; 0x10b8 <dtoa_prf+0x114>
    10a2:	f6 01       	movw	r30, r12
    10a4:	8b 2d       	mov	r24, r11
    10a6:	90 e2       	ldi	r25, 0x20	; 32
    10a8:	88 23       	and	r24, r24
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <dtoa_prf+0x10e>
    10ac:	91 93       	st	Z+, r25
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	fb cf       	rjmp	.-10     	; 0x10a8 <dtoa_prf+0x104>
    10b2:	cb 0c       	add	r12, r11
    10b4:	d1 1c       	adc	r13, r1
    10b6:	b1 2c       	mov	r11, r1
    10b8:	66 23       	and	r22, r22
    10ba:	31 f0       	breq	.+12     	; 0x10c8 <dtoa_prf+0x124>
    10bc:	f6 01       	movw	r30, r12
    10be:	60 83       	st	Z, r22
    10c0:	96 01       	movw	r18, r12
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	69 01       	movw	r12, r18
    10c8:	c6 01       	movw	r24, r12
    10ca:	03 96       	adiw	r24, 0x03	; 3
    10cc:	e2 fe       	sbrs	r14, 2
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <dtoa_prf+0x13a>
    10d0:	29 e4       	ldi	r18, 0x49	; 73
    10d2:	f6 01       	movw	r30, r12
    10d4:	20 83       	st	Z, r18
    10d6:	2e e4       	ldi	r18, 0x4E	; 78
    10d8:	21 83       	std	Z+1, r18	; 0x01
    10da:	26 e4       	ldi	r18, 0x46	; 70
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <dtoa_prf+0x146>
    10de:	29 e6       	ldi	r18, 0x69	; 105
    10e0:	f6 01       	movw	r30, r12
    10e2:	20 83       	st	Z, r18
    10e4:	2e e6       	ldi	r18, 0x6E	; 110
    10e6:	21 83       	std	Z+1, r18	; 0x01
    10e8:	26 e6       	ldi	r18, 0x66	; 102
    10ea:	22 83       	std	Z+2, r18	; 0x02
    10ec:	fc 01       	movw	r30, r24
    10ee:	2b 2d       	mov	r18, r11
    10f0:	30 e2       	ldi	r19, 0x20	; 32
    10f2:	22 23       	and	r18, r18
    10f4:	19 f0       	breq	.+6      	; 0x10fc <dtoa_prf+0x158>
    10f6:	31 93       	st	Z+, r19
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	fb cf       	rjmp	.-10     	; 0x10f2 <dtoa_prf+0x14e>
    10fc:	fc 01       	movw	r30, r24
    10fe:	eb 0d       	add	r30, r11
    1100:	f1 1d       	adc	r31, r1
    1102:	10 82       	st	Z, r1
    1104:	8e ef       	ldi	r24, 0xFE	; 254
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	b7 c0       	rjmp	.+366    	; 0x1278 <dtoa_prf+0x2d4>
    110a:	b1 e0       	ldi	r27, 0x01	; 1
    110c:	61 11       	cpse	r22, r1
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <dtoa_prf+0x16e>
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	4b 2f       	mov	r20, r27
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	18 16       	cp	r1, r24
    1118:	19 06       	cpc	r1, r25
    111a:	24 f4       	brge	.+8      	; 0x1124 <dtoa_prf+0x180>
    111c:	9c 01       	movw	r18, r24
    111e:	2f 5f       	subi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <dtoa_prf+0x184>
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	24 0f       	add	r18, r20
    112a:	35 1f       	adc	r19, r21
    112c:	11 23       	and	r17, r17
    112e:	29 f0       	breq	.+10     	; 0x113a <dtoa_prf+0x196>
    1130:	41 2f       	mov	r20, r17
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	4f 5f       	subi	r20, 0xFF	; 255
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	02 c0       	rjmp	.+4      	; 0x113e <dtoa_prf+0x19a>
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	42 0f       	add	r20, r18
    1140:	53 1f       	adc	r21, r19
    1142:	2b 2d       	mov	r18, r11
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	42 17       	cp	r20, r18
    1148:	53 07       	cpc	r21, r19
    114a:	14 f4       	brge	.+4      	; 0x1150 <dtoa_prf+0x1ac>
    114c:	b4 1a       	sub	r11, r20
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <dtoa_prf+0x1ae>
    1150:	b1 2c       	mov	r11, r1
    1152:	2e 2d       	mov	r18, r14
    1154:	28 71       	andi	r18, 0x18	; 24
    1156:	59 f4       	brne	.+22     	; 0x116e <dtoa_prf+0x1ca>
    1158:	f6 01       	movw	r30, r12
    115a:	2b 2d       	mov	r18, r11
    115c:	30 e2       	ldi	r19, 0x20	; 32
    115e:	22 23       	and	r18, r18
    1160:	19 f0       	breq	.+6      	; 0x1168 <dtoa_prf+0x1c4>
    1162:	31 93       	st	Z+, r19
    1164:	21 50       	subi	r18, 0x01	; 1
    1166:	fb cf       	rjmp	.-10     	; 0x115e <dtoa_prf+0x1ba>
    1168:	cb 0c       	add	r12, r11
    116a:	d1 1c       	adc	r13, r1
    116c:	b1 2c       	mov	r11, r1
    116e:	bb 23       	and	r27, r27
    1170:	31 f0       	breq	.+12     	; 0x117e <dtoa_prf+0x1da>
    1172:	f6 01       	movw	r30, r12
    1174:	60 83       	st	Z, r22
    1176:	96 01       	movw	r18, r12
    1178:	2f 5f       	subi	r18, 0xFF	; 255
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	69 01       	movw	r12, r18
    117e:	a1 11       	cpse	r26, r1
    1180:	0b c0       	rjmp	.+22     	; 0x1198 <dtoa_prf+0x1f4>
    1182:	f6 01       	movw	r30, r12
    1184:	2b 2d       	mov	r18, r11
    1186:	30 e3       	ldi	r19, 0x30	; 48
    1188:	22 23       	and	r18, r18
    118a:	19 f0       	breq	.+6      	; 0x1192 <dtoa_prf+0x1ee>
    118c:	31 93       	st	Z+, r19
    118e:	21 50       	subi	r18, 0x01	; 1
    1190:	fb cf       	rjmp	.-10     	; 0x1188 <dtoa_prf+0x1e4>
    1192:	cb 0c       	add	r12, r11
    1194:	d1 1c       	adc	r13, r1
    1196:	b1 2c       	mov	r11, r1
    1198:	f8 0e       	add	r15, r24
    119a:	0a 81       	ldd	r16, Y+2	; 0x02
    119c:	37 2f       	mov	r19, r23
    119e:	30 71       	andi	r19, 0x10	; 16
    11a0:	a3 2e       	mov	r10, r19
    11a2:	74 ff       	sbrs	r23, 4
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <dtoa_prf+0x208>
    11a6:	01 33       	cpi	r16, 0x31	; 49
    11a8:	09 f4       	brne	.+2      	; 0x11ac <dtoa_prf+0x208>
    11aa:	fa 94       	dec	r15
    11ac:	1f 14       	cp	r1, r15
    11ae:	2c f4       	brge	.+10     	; 0x11ba <dtoa_prf+0x216>
    11b0:	2f 2d       	mov	r18, r15
    11b2:	29 30       	cpi	r18, 0x09	; 9
    11b4:	18 f0       	brcs	.+6      	; 0x11bc <dtoa_prf+0x218>
    11b6:	28 e0       	ldi	r18, 0x08	; 8
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <dtoa_prf+0x218>
    11ba:	21 e0       	ldi	r18, 0x01	; 1
    11bc:	68 2f       	mov	r22, r24
    11be:	39 2f       	mov	r19, r25
    11c0:	97 ff       	sbrs	r25, 7
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <dtoa_prf+0x224>
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	46 2f       	mov	r20, r22
    11ca:	53 2f       	mov	r21, r19
    11cc:	61 2c       	mov	r6, r1
    11ce:	71 2c       	mov	r7, r1
    11d0:	3e e2       	ldi	r19, 0x2E	; 46
    11d2:	93 2e       	mov	r9, r19
    11d4:	bc 01       	movw	r22, r24
    11d6:	62 1b       	sub	r22, r18
    11d8:	71 09       	sbc	r23, r1
    11da:	9b 01       	movw	r18, r22
    11dc:	dc 01       	movw	r26, r24
    11de:	a4 1b       	sub	r26, r20
    11e0:	b5 0b       	sbc	r27, r21
    11e2:	e1 e0       	ldi	r30, 0x01	; 1
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	ec 0f       	add	r30, r28
    11e8:	fd 1f       	adc	r31, r29
    11ea:	ae 0f       	add	r26, r30
    11ec:	bf 1f       	adc	r27, r31
    11ee:	e1 2e       	mov	r14, r17
    11f0:	f1 2c       	mov	r15, r1
    11f2:	f1 94       	neg	r15
    11f4:	e1 94       	neg	r14
    11f6:	f1 08       	sbc	r15, r1
    11f8:	4f 3f       	cpi	r20, 0xFF	; 255
    11fa:	ff ef       	ldi	r31, 0xFF	; 255
    11fc:	5f 07       	cpc	r21, r31
    11fe:	31 f4       	brne	.+12     	; 0x120c <dtoa_prf+0x268>
    1200:	f6 01       	movw	r30, r12
    1202:	90 82       	st	Z, r9
    1204:	b6 01       	movw	r22, r12
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	6b 01       	movw	r12, r22
    120c:	84 17       	cp	r24, r20
    120e:	95 07       	cpc	r25, r21
    1210:	4c f0       	brlt	.+18     	; 0x1224 <dtoa_prf+0x280>
    1212:	24 17       	cp	r18, r20
    1214:	35 07       	cpc	r19, r21
    1216:	34 f4       	brge	.+12     	; 0x1224 <dtoa_prf+0x280>
    1218:	bd 01       	movw	r22, r26
    121a:	66 0d       	add	r22, r6
    121c:	77 1d       	adc	r23, r7
    121e:	fb 01       	movw	r30, r22
    1220:	11 81       	ldd	r17, Z+1	; 0x01
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <dtoa_prf+0x282>
    1224:	10 e3       	ldi	r17, 0x30	; 48
    1226:	41 50       	subi	r20, 0x01	; 1
    1228:	51 09       	sbc	r21, r1
    122a:	ff ef       	ldi	r31, 0xFF	; 255
    122c:	6f 1a       	sub	r6, r31
    122e:	7f 0a       	sbc	r7, r31
    1230:	b6 01       	movw	r22, r12
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	4e 15       	cp	r20, r14
    1238:	5f 05       	cpc	r21, r15
    123a:	24 f0       	brlt	.+8      	; 0x1244 <dtoa_prf+0x2a0>
    123c:	f6 01       	movw	r30, r12
    123e:	10 83       	st	Z, r17
    1240:	6b 01       	movw	r12, r22
    1242:	da cf       	rjmp	.-76     	; 0x11f8 <dtoa_prf+0x254>
    1244:	48 17       	cp	r20, r24
    1246:	59 07       	cpc	r21, r25
    1248:	39 f4       	brne	.+14     	; 0x1258 <dtoa_prf+0x2b4>
    124a:	06 33       	cpi	r16, 0x36	; 54
    124c:	20 f4       	brcc	.+8      	; 0x1256 <dtoa_prf+0x2b2>
    124e:	05 33       	cpi	r16, 0x35	; 53
    1250:	19 f4       	brne	.+6      	; 0x1258 <dtoa_prf+0x2b4>
    1252:	a1 10       	cpse	r10, r1
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <dtoa_prf+0x2b4>
    1256:	11 e3       	ldi	r17, 0x31	; 49
    1258:	f6 01       	movw	r30, r12
    125a:	10 83       	st	Z, r17
    125c:	fb 01       	movw	r30, r22
    125e:	8b 2d       	mov	r24, r11
    1260:	90 e2       	ldi	r25, 0x20	; 32
    1262:	88 23       	and	r24, r24
    1264:	19 f0       	breq	.+6      	; 0x126c <dtoa_prf+0x2c8>
    1266:	91 93       	st	Z+, r25
    1268:	81 50       	subi	r24, 0x01	; 1
    126a:	fb cf       	rjmp	.-10     	; 0x1262 <dtoa_prf+0x2be>
    126c:	fb 01       	movw	r30, r22
    126e:	eb 0d       	add	r30, r11
    1270:	f1 1d       	adc	r31, r1
    1272:	10 82       	st	Z, r1
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	29 96       	adiw	r28, 0x09	; 9
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	7f 90       	pop	r7
    129c:	6f 90       	pop	r6
    129e:	08 95       	ret

000012a0 <__ftoa_engine>:
    12a0:	28 30       	cpi	r18, 0x08	; 8
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <__ftoa_engine+0x6>
    12a4:	27 e0       	ldi	r18, 0x07	; 7
    12a6:	33 27       	eor	r19, r19
    12a8:	da 01       	movw	r26, r20
    12aa:	99 0f       	add	r25, r25
    12ac:	31 1d       	adc	r19, r1
    12ae:	87 fd       	sbrc	r24, 7
    12b0:	91 60       	ori	r25, 0x01	; 1
    12b2:	00 96       	adiw	r24, 0x00	; 0
    12b4:	61 05       	cpc	r22, r1
    12b6:	71 05       	cpc	r23, r1
    12b8:	39 f4       	brne	.+14     	; 0x12c8 <__ftoa_engine+0x28>
    12ba:	32 60       	ori	r19, 0x02	; 2
    12bc:	2e 5f       	subi	r18, 0xFE	; 254
    12be:	3d 93       	st	X+, r19
    12c0:	30 e3       	ldi	r19, 0x30	; 48
    12c2:	2a 95       	dec	r18
    12c4:	e1 f7       	brne	.-8      	; 0x12be <__ftoa_engine+0x1e>
    12c6:	08 95       	ret
    12c8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ca:	30 f0       	brcs	.+12     	; 0x12d8 <__ftoa_engine+0x38>
    12cc:	80 38       	cpi	r24, 0x80	; 128
    12ce:	71 05       	cpc	r23, r1
    12d0:	61 05       	cpc	r22, r1
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <__ftoa_engine+0x36>
    12d4:	3c 5f       	subi	r19, 0xFC	; 252
    12d6:	3c 5f       	subi	r19, 0xFC	; 252
    12d8:	3d 93       	st	X+, r19
    12da:	91 30       	cpi	r25, 0x01	; 1
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <__ftoa_engine+0x40>
    12de:	80 68       	ori	r24, 0x80	; 128
    12e0:	91 1d       	adc	r25, r1
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	1f 93       	push	r17
    12e8:	0f 93       	push	r16
    12ea:	ff 92       	push	r15
    12ec:	ef 92       	push	r14
    12ee:	19 2f       	mov	r17, r25
    12f0:	98 7f       	andi	r25, 0xF8	; 248
    12f2:	96 95       	lsr	r25
    12f4:	e9 2f       	mov	r30, r25
    12f6:	96 95       	lsr	r25
    12f8:	96 95       	lsr	r25
    12fa:	e9 0f       	add	r30, r25
    12fc:	ff 27       	eor	r31, r31
    12fe:	e2 55       	subi	r30, 0x52	; 82
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	99 27       	eor	r25, r25
    1304:	33 27       	eor	r19, r19
    1306:	ee 24       	eor	r14, r14
    1308:	ff 24       	eor	r15, r15
    130a:	a7 01       	movw	r20, r14
    130c:	e7 01       	movw	r28, r14
    130e:	05 90       	lpm	r0, Z+
    1310:	08 94       	sec
    1312:	07 94       	ror	r0
    1314:	28 f4       	brcc	.+10     	; 0x1320 <__ftoa_engine+0x80>
    1316:	36 0f       	add	r19, r22
    1318:	e7 1e       	adc	r14, r23
    131a:	f8 1e       	adc	r15, r24
    131c:	49 1f       	adc	r20, r25
    131e:	51 1d       	adc	r21, r1
    1320:	66 0f       	add	r22, r22
    1322:	77 1f       	adc	r23, r23
    1324:	88 1f       	adc	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	06 94       	lsr	r0
    132a:	a1 f7       	brne	.-24     	; 0x1314 <__ftoa_engine+0x74>
    132c:	05 90       	lpm	r0, Z+
    132e:	07 94       	ror	r0
    1330:	28 f4       	brcc	.+10     	; 0x133c <__ftoa_engine+0x9c>
    1332:	e7 0e       	add	r14, r23
    1334:	f8 1e       	adc	r15, r24
    1336:	49 1f       	adc	r20, r25
    1338:	56 1f       	adc	r21, r22
    133a:	c1 1d       	adc	r28, r1
    133c:	77 0f       	add	r23, r23
    133e:	88 1f       	adc	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	66 1f       	adc	r22, r22
    1344:	06 94       	lsr	r0
    1346:	a1 f7       	brne	.-24     	; 0x1330 <__ftoa_engine+0x90>
    1348:	05 90       	lpm	r0, Z+
    134a:	07 94       	ror	r0
    134c:	28 f4       	brcc	.+10     	; 0x1358 <__ftoa_engine+0xb8>
    134e:	f8 0e       	add	r15, r24
    1350:	49 1f       	adc	r20, r25
    1352:	56 1f       	adc	r21, r22
    1354:	c7 1f       	adc	r28, r23
    1356:	d1 1d       	adc	r29, r1
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	66 1f       	adc	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	06 94       	lsr	r0
    1362:	a1 f7       	brne	.-24     	; 0x134c <__ftoa_engine+0xac>
    1364:	05 90       	lpm	r0, Z+
    1366:	07 94       	ror	r0
    1368:	20 f4       	brcc	.+8      	; 0x1372 <__ftoa_engine+0xd2>
    136a:	49 0f       	add	r20, r25
    136c:	56 1f       	adc	r21, r22
    136e:	c7 1f       	adc	r28, r23
    1370:	d8 1f       	adc	r29, r24
    1372:	99 0f       	add	r25, r25
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	06 94       	lsr	r0
    137c:	a9 f7       	brne	.-22     	; 0x1368 <__ftoa_engine+0xc8>
    137e:	84 91       	lpm	r24, Z
    1380:	10 95       	com	r17
    1382:	17 70       	andi	r17, 0x07	; 7
    1384:	41 f0       	breq	.+16     	; 0x1396 <__ftoa_engine+0xf6>
    1386:	d6 95       	lsr	r29
    1388:	c7 95       	ror	r28
    138a:	57 95       	ror	r21
    138c:	47 95       	ror	r20
    138e:	f7 94       	ror	r15
    1390:	e7 94       	ror	r14
    1392:	1a 95       	dec	r17
    1394:	c1 f7       	brne	.-16     	; 0x1386 <__ftoa_engine+0xe6>
    1396:	e4 e5       	ldi	r30, 0x54	; 84
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	68 94       	set
    139c:	15 90       	lpm	r1, Z+
    139e:	15 91       	lpm	r17, Z+
    13a0:	35 91       	lpm	r19, Z+
    13a2:	65 91       	lpm	r22, Z+
    13a4:	95 91       	lpm	r25, Z+
    13a6:	05 90       	lpm	r0, Z+
    13a8:	7f e2       	ldi	r23, 0x2F	; 47
    13aa:	73 95       	inc	r23
    13ac:	e1 18       	sub	r14, r1
    13ae:	f1 0a       	sbc	r15, r17
    13b0:	43 0b       	sbc	r20, r19
    13b2:	56 0b       	sbc	r21, r22
    13b4:	c9 0b       	sbc	r28, r25
    13b6:	d0 09       	sbc	r29, r0
    13b8:	c0 f7       	brcc	.-16     	; 0x13aa <__ftoa_engine+0x10a>
    13ba:	e1 0c       	add	r14, r1
    13bc:	f1 1e       	adc	r15, r17
    13be:	43 1f       	adc	r20, r19
    13c0:	56 1f       	adc	r21, r22
    13c2:	c9 1f       	adc	r28, r25
    13c4:	d0 1d       	adc	r29, r0
    13c6:	7e f4       	brtc	.+30     	; 0x13e6 <__ftoa_engine+0x146>
    13c8:	70 33       	cpi	r23, 0x30	; 48
    13ca:	11 f4       	brne	.+4      	; 0x13d0 <__ftoa_engine+0x130>
    13cc:	8a 95       	dec	r24
    13ce:	e6 cf       	rjmp	.-52     	; 0x139c <__ftoa_engine+0xfc>
    13d0:	e8 94       	clt
    13d2:	01 50       	subi	r16, 0x01	; 1
    13d4:	30 f0       	brcs	.+12     	; 0x13e2 <__ftoa_engine+0x142>
    13d6:	08 0f       	add	r16, r24
    13d8:	0a f4       	brpl	.+2      	; 0x13dc <__ftoa_engine+0x13c>
    13da:	00 27       	eor	r16, r16
    13dc:	02 17       	cp	r16, r18
    13de:	08 f4       	brcc	.+2      	; 0x13e2 <__ftoa_engine+0x142>
    13e0:	20 2f       	mov	r18, r16
    13e2:	23 95       	inc	r18
    13e4:	02 2f       	mov	r16, r18
    13e6:	7a 33       	cpi	r23, 0x3A	; 58
    13e8:	28 f0       	brcs	.+10     	; 0x13f4 <__ftoa_engine+0x154>
    13ea:	79 e3       	ldi	r23, 0x39	; 57
    13ec:	7d 93       	st	X+, r23
    13ee:	2a 95       	dec	r18
    13f0:	e9 f7       	brne	.-6      	; 0x13ec <__ftoa_engine+0x14c>
    13f2:	10 c0       	rjmp	.+32     	; 0x1414 <__ftoa_engine+0x174>
    13f4:	7d 93       	st	X+, r23
    13f6:	2a 95       	dec	r18
    13f8:	89 f6       	brne	.-94     	; 0x139c <__ftoa_engine+0xfc>
    13fa:	06 94       	lsr	r0
    13fc:	97 95       	ror	r25
    13fe:	67 95       	ror	r22
    1400:	37 95       	ror	r19
    1402:	17 95       	ror	r17
    1404:	17 94       	ror	r1
    1406:	e1 18       	sub	r14, r1
    1408:	f1 0a       	sbc	r15, r17
    140a:	43 0b       	sbc	r20, r19
    140c:	56 0b       	sbc	r21, r22
    140e:	c9 0b       	sbc	r28, r25
    1410:	d0 09       	sbc	r29, r0
    1412:	98 f0       	brcs	.+38     	; 0x143a <__ftoa_engine+0x19a>
    1414:	23 95       	inc	r18
    1416:	7e 91       	ld	r23, -X
    1418:	73 95       	inc	r23
    141a:	7a 33       	cpi	r23, 0x3A	; 58
    141c:	08 f0       	brcs	.+2      	; 0x1420 <__ftoa_engine+0x180>
    141e:	70 e3       	ldi	r23, 0x30	; 48
    1420:	7c 93       	st	X, r23
    1422:	20 13       	cpse	r18, r16
    1424:	b8 f7       	brcc	.-18     	; 0x1414 <__ftoa_engine+0x174>
    1426:	7e 91       	ld	r23, -X
    1428:	70 61       	ori	r23, 0x10	; 16
    142a:	7d 93       	st	X+, r23
    142c:	30 f0       	brcs	.+12     	; 0x143a <__ftoa_engine+0x19a>
    142e:	83 95       	inc	r24
    1430:	71 e3       	ldi	r23, 0x31	; 49
    1432:	7d 93       	st	X+, r23
    1434:	70 e3       	ldi	r23, 0x30	; 48
    1436:	2a 95       	dec	r18
    1438:	e1 f7       	brne	.-8      	; 0x1432 <__ftoa_engine+0x192>
    143a:	11 24       	eor	r1, r1
    143c:	ef 90       	pop	r14
    143e:	ff 90       	pop	r15
    1440:	0f 91       	pop	r16
    1442:	1f 91       	pop	r17
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	99 27       	eor	r25, r25
    144a:	87 fd       	sbrc	r24, 7
    144c:	90 95       	com	r25
    144e:	08 95       	ret

00001450 <strrev>:
    1450:	dc 01       	movw	r26, r24
    1452:	fc 01       	movw	r30, r24
    1454:	67 2f       	mov	r22, r23
    1456:	71 91       	ld	r23, Z+
    1458:	77 23       	and	r23, r23
    145a:	e1 f7       	brne	.-8      	; 0x1454 <strrev+0x4>
    145c:	32 97       	sbiw	r30, 0x02	; 2
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <strrev+0x18>
    1460:	7c 91       	ld	r23, X
    1462:	6d 93       	st	X+, r22
    1464:	70 83       	st	Z, r23
    1466:	62 91       	ld	r22, -Z
    1468:	ae 17       	cp	r26, r30
    146a:	bf 07       	cpc	r27, r31
    146c:	c8 f3       	brcs	.-14     	; 0x1460 <strrev+0x10>
    146e:	08 95       	ret

00001470 <_exit>:
    1470:	f8 94       	cli

00001472 <__stop_program>:
    1472:	ff cf       	rjmp	.-2      	; 0x1472 <__stop_program>
