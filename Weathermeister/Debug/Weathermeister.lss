
Weathermeister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000009d8  00000a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  00800066  00800066  00000a72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a17  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000835  00000000  00000000  00002621  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000883  00000000  00000000  00002e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f4  00000000  00000000  000036dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057a  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001823  00000000  00000000  0000404a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0000586d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 04 	call	0x8d2	; 0x8d2 <main>
  8a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <bmp085_writemem>:
#include "i2cmaster.h"

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	d8 2f       	mov	r29, r24
  98:	c6 2f       	mov	r28, r22
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
  9a:	8e ee       	ldi	r24, 0xEE	; 238
  9c:	0e 94 c7 03 	call	0x78e	; 0x78e <i2c_start_wait>
	i2c_write(reg);
  a0:	8d 2f       	mov	r24, r29
  a2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <i2c_write>
	i2c_write(value);
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <i2c_write>
	i2c_stop();
  ac:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <i2c_stop>
}
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <bmp085_readmem>:

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	c8 2f       	mov	r28, r24
  c6:	f6 2e       	mov	r15, r22
  c8:	d7 2f       	mov	r29, r23
  ca:	d4 2e       	mov	r13, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
  cc:	8e ee       	ldi	r24, 0xEE	; 238
  ce:	0e 94 c7 03 	call	0x78e	; 0x78e <i2c_start_wait>
	i2c_write(reg);
  d2:	8c 2f       	mov	r24, r28
  d4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
  d8:	8f ee       	ldi	r24, 0xEF	; 239
  da:	0e 94 e5 03 	call	0x7ca	; 0x7ca <i2c_rep_start>
	for(i=0; i<bytes; i++) {
  de:	dd 20       	and	r13, r13
  e0:	d1 f0       	breq	.+52     	; 0x116 <bmp085_readmem+0x60>
  e2:	0f 2d       	mov	r16, r15
  e4:	1d 2f       	mov	r17, r29
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
		if(i==bytes-1)
  ea:	ed 2c       	mov	r14, r13
  ec:	f1 2c       	mov	r15, r1
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	e8 1a       	sub	r14, r24
  f2:	f1 08       	sbc	r15, r1
  f4:	ce 15       	cp	r28, r14
  f6:	df 05       	cpc	r29, r15
  f8:	29 f4       	brne	.+10     	; 0x104 <bmp085_readmem+0x4e>
			buff[i] = i2c_readNak();
  fa:	0e 94 02 04 	call	0x804	; 0x804 <i2c_readNak>
  fe:	f8 01       	movw	r30, r16
 100:	80 83       	st	Z, r24
 102:	04 c0       	rjmp	.+8      	; 0x10c <bmp085_readmem+0x56>
		else
			buff[i] = i2c_readAck();
 104:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <i2c_readAck>
 108:	f8 01       	movw	r30, r16
 10a:	80 83       	st	Z, r24
 10c:	21 96       	adiw	r28, 0x01	; 1
 10e:	0f 5f       	subi	r16, 0xFF	; 255
 110:	1f 4f       	sbci	r17, 0xFF	; 255
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
 112:	cd 15       	cp	r28, r13
 114:	78 f3       	brcs	.-34     	; 0xf4 <bmp085_readmem+0x3e>
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
 116:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <i2c_stop>
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	08 95       	ret

0000012a <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ea eb       	ldi	r30, 0xBA	; 186
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	c6 e6       	ldi	r28, 0x66	; 102
 138:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
 13a:	0c 81       	ldd	r16, Y+4	; 0x04
 13c:	1d 81       	ldd	r17, Y+5	; 0x05
 13e:	2e 81       	ldd	r18, Y+6	; 0x06
 140:	3f 81       	ldd	r19, Y+7	; 0x07
 142:	09 93       	st	Y+, r16
 144:	19 93       	st	Y+, r17
 146:	29 93       	st	Y+, r18
 148:	39 93       	st	Y+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
 14a:	ce 17       	cp	r28, r30
 14c:	df 07       	cpc	r29, r31
 14e:	a9 f7       	brne	.-22     	; 0x13a <bmp085_avaragefilter+0x10>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
 150:	60 93 b6 00 	sts	0x00B6, r22
 154:	70 93 b7 00 	sts	0x00B7, r23
 158:	80 93 b8 00 	sts	0x00B8, r24
 15c:	90 93 b9 00 	sts	0x00B9, r25
 160:	a6 e6       	ldi	r26, 0x66	; 102
 162:	b0 e0       	ldi	r27, 0x00	; 0
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
 16a:	0d 91       	ld	r16, X+
 16c:	1d 91       	ld	r17, X+
 16e:	2d 91       	ld	r18, X+
 170:	3d 91       	ld	r19, X+
 172:	60 0f       	add	r22, r16
 174:	71 1f       	adc	r23, r17
 176:	82 1f       	adc	r24, r18
 178:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
 17a:	ae 17       	cp	r26, r30
 17c:	bf 07       	cpc	r27, r31
 17e:	a9 f7       	brne	.-22     	; 0x16a <bmp085_avaragefilter+0x40>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
 180:	25 e1       	ldi	r18, 0x15	; 21
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	0e 94 a9 04 	call	0x952	; 0x952 <__divmodsi4>
}
 18c:	ca 01       	movw	r24, r20
 18e:	b9 01       	movw	r22, r18
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <bmp085_getcalibration+0x6>
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
 1a4:	1a 82       	std	Y+2, r1	; 0x02
 1a6:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
 1a8:	42 e0       	ldi	r20, 0x02	; 2
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	8a ea       	ldi	r24, 0xAA	; 170
 1b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	98 2f       	mov	r25, r24
 1bc:	88 27       	eor	r24, r24
 1be:	2a 81       	ldd	r18, Y+2	; 0x02
 1c0:	82 2b       	or	r24, r18
 1c2:	90 93 cf 00 	sts	0x00CF, r25
 1c6:	80 93 ce 00 	sts	0x00CE, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
 1ca:	42 e0       	ldi	r20, 0x02	; 2
 1cc:	be 01       	movw	r22, r28
 1ce:	6f 5f       	subi	r22, 0xFF	; 255
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	8c ea       	ldi	r24, 0xAC	; 172
 1d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	98 2f       	mov	r25, r24
 1de:	88 27       	eor	r24, r24
 1e0:	2a 81       	ldd	r18, Y+2	; 0x02
 1e2:	82 2b       	or	r24, r18
 1e4:	90 93 d7 00 	sts	0x00D7, r25
 1e8:	80 93 d6 00 	sts	0x00D6, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
 1ec:	42 e0       	ldi	r20, 0x02	; 2
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	8e ea       	ldi	r24, 0xAE	; 174
 1f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	98 2f       	mov	r25, r24
 200:	88 27       	eor	r24, r24
 202:	2a 81       	ldd	r18, Y+2	; 0x02
 204:	82 2b       	or	r24, r18
 206:	90 93 c3 00 	sts	0x00C3, r25
 20a:	80 93 c2 00 	sts	0x00C2, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
 20e:	42 e0       	ldi	r20, 0x02	; 2
 210:	be 01       	movw	r22, r28
 212:	6f 5f       	subi	r22, 0xFF	; 255
 214:	7f 4f       	sbci	r23, 0xFF	; 255
 216:	80 eb       	ldi	r24, 0xB0	; 176
 218:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	98 2f       	mov	r25, r24
 222:	88 27       	eor	r24, r24
 224:	2a 81       	ldd	r18, Y+2	; 0x02
 226:	82 2b       	or	r24, r18
 228:	90 93 bb 00 	sts	0x00BB, r25
 22c:	80 93 ba 00 	sts	0x00BA, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
 230:	42 e0       	ldi	r20, 0x02	; 2
 232:	be 01       	movw	r22, r28
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	82 eb       	ldi	r24, 0xB2	; 178
 23a:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	98 2f       	mov	r25, r24
 244:	88 27       	eor	r24, r24
 246:	2a 81       	ldd	r18, Y+2	; 0x02
 248:	82 2b       	or	r24, r18
 24a:	90 93 d3 00 	sts	0x00D3, r25
 24e:	80 93 d2 00 	sts	0x00D2, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
 252:	42 e0       	ldi	r20, 0x02	; 2
 254:	be 01       	movw	r22, r28
 256:	6f 5f       	subi	r22, 0xFF	; 255
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	84 eb       	ldi	r24, 0xB4	; 180
 25c:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	98 2f       	mov	r25, r24
 266:	88 27       	eor	r24, r24
 268:	2a 81       	ldd	r18, Y+2	; 0x02
 26a:	82 2b       	or	r24, r18
 26c:	90 93 cb 00 	sts	0x00CB, r25
 270:	80 93 ca 00 	sts	0x00CA, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
 274:	42 e0       	ldi	r20, 0x02	; 2
 276:	be 01       	movw	r22, r28
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	86 eb       	ldi	r24, 0xB6	; 182
 27e:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	98 2f       	mov	r25, r24
 288:	88 27       	eor	r24, r24
 28a:	2a 81       	ldd	r18, Y+2	; 0x02
 28c:	82 2b       	or	r24, r18
 28e:	90 93 c9 00 	sts	0x00C9, r25
 292:	80 93 c8 00 	sts	0x00C8, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
 296:	42 e0       	ldi	r20, 0x02	; 2
 298:	be 01       	movw	r22, r28
 29a:	6f 5f       	subi	r22, 0xFF	; 255
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	88 eb       	ldi	r24, 0xB8	; 184
 2a0:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	98 2f       	mov	r25, r24
 2aa:	88 27       	eor	r24, r24
 2ac:	2a 81       	ldd	r18, Y+2	; 0x02
 2ae:	82 2b       	or	r24, r18
 2b0:	90 93 bd 00 	sts	0x00BD, r25
 2b4:	80 93 bc 00 	sts	0x00BC, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
 2b8:	42 e0       	ldi	r20, 0x02	; 2
 2ba:	be 01       	movw	r22, r28
 2bc:	6f 5f       	subi	r22, 0xFF	; 255
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
 2c0:	8a eb       	ldi	r24, 0xBA	; 186
 2c2:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	98 2f       	mov	r25, r24
 2cc:	88 27       	eor	r24, r24
 2ce:	2a 81       	ldd	r18, Y+2	; 0x02
 2d0:	82 2b       	or	r24, r18
 2d2:	90 93 d1 00 	sts	0x00D1, r25
 2d6:	80 93 d0 00 	sts	0x00D0, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
 2da:	42 e0       	ldi	r20, 0x02	; 2
 2dc:	be 01       	movw	r22, r28
 2de:	6f 5f       	subi	r22, 0xFF	; 255
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	8c eb       	ldi	r24, 0xBC	; 188
 2e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	98 2f       	mov	r25, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	2a 81       	ldd	r18, Y+2	; 0x02
 2f2:	82 2b       	or	r24, r18
 2f4:	90 93 d5 00 	sts	0x00D5, r25
 2f8:	80 93 d4 00 	sts	0x00D4, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
 2fc:	42 e0       	ldi	r20, 0x02	; 2
 2fe:	be 01       	movw	r22, r28
 300:	6f 5f       	subi	r22, 0xFF	; 255
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	8e eb       	ldi	r24, 0xBE	; 190
 306:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	98 2f       	mov	r25, r24
 310:	88 27       	eor	r24, r24
 312:	2a 81       	ldd	r18, Y+2	; 0x02
 314:	82 2b       	or	r24, r18
 316:	90 93 cd 00 	sts	0x00CD, r25
 31a:	80 93 cc 00 	sts	0x00CC, r24
}
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <bmp085_getrawtemperature+0x12>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
 33e:	1a 82       	std	Y+2, r1	; 0x02
 340:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
 342:	6e e2       	ldi	r22, 0x2E	; 46
 344:	84 ef       	ldi	r24, 0xF4	; 244
 346:	0e 94 49 00 	call	0x92	; 0x92 <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	81 ee       	ldi	r24, 0xE1	; 225
 34c:	94 e0       	ldi	r25, 0x04	; 4
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <bmp085_getrawtemperature+0x26>
 352:	00 c0       	rjmp	.+0      	; 0x354 <bmp085_getrawtemperature+0x2c>
 354:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
 356:	42 e0       	ldi	r20, 0x02	; 2
 358:	be 01       	movw	r22, r28
 35a:	6f 5f       	subi	r22, 0xFF	; 255
 35c:	7f 4f       	sbci	r23, 0xFF	; 255
 35e:	86 ef       	ldi	r24, 0xF6	; 246
 360:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
 364:	29 81       	ldd	r18, Y+1	; 0x01
 366:	82 2f       	mov	r24, r18
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	a0 e0       	ldi	r26, 0x00	; 0
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	44 27       	eor	r20, r20
 370:	58 2f       	mov	r21, r24
 372:	69 2f       	mov	r22, r25
 374:	7a 2f       	mov	r23, r26
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	48 2b       	or	r20, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
 37a:	80 91 ca 00 	lds	r24, 0x00CA
 37e:	90 91 cb 00 	lds	r25, 0x00CB
 382:	9a 01       	movw	r18, r20
 384:	ab 01       	movw	r20, r22
 386:	28 1b       	sub	r18, r24
 388:	39 0b       	sbc	r19, r25
 38a:	41 09       	sbc	r20, r1
 38c:	51 09       	sbc	r21, r1
 38e:	a0 91 d2 00 	lds	r26, 0x00D2
 392:	b0 91 d3 00 	lds	r27, 0x00D3
 396:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
 39a:	6b 01       	movw	r12, r22
 39c:	7c 01       	movw	r14, r24
 39e:	0b 2e       	mov	r0, r27
 3a0:	bf e0       	ldi	r27, 0x0F	; 15
 3a2:	f5 94       	asr	r15
 3a4:	e7 94       	ror	r14
 3a6:	d7 94       	ror	r13
 3a8:	c7 94       	ror	r12
 3aa:	ba 95       	dec	r27
 3ac:	d1 f7       	brne	.-12     	; 0x3a2 <bmp085_getrawtemperature+0x7a>
 3ae:	b0 2d       	mov	r27, r0
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
 3b0:	60 91 d4 00 	lds	r22, 0x00D4
 3b4:	70 91 d5 00 	lds	r23, 0x00D5
 3b8:	cb 01       	movw	r24, r22
 3ba:	aa 27       	eor	r26, r26
 3bc:	97 fd       	sbrc	r25, 7
 3be:	a0 95       	com	r26
 3c0:	ba 2f       	mov	r27, r26
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	05 2e       	mov	r0, r21
 3c8:	5b e0       	ldi	r21, 0x0B	; 11
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	5a 95       	dec	r21
 3d4:	d1 f7       	brne	.-12     	; 0x3ca <bmp085_getrawtemperature+0xa2>
 3d6:	50 2d       	mov	r21, r0
 3d8:	20 91 cc 00 	lds	r18, 0x00CC
 3dc:	30 91 cd 00 	lds	r19, 0x00CD
 3e0:	89 01       	movw	r16, r18
 3e2:	22 27       	eor	r18, r18
 3e4:	17 fd       	sbrc	r17, 7
 3e6:	20 95       	com	r18
 3e8:	32 2f       	mov	r19, r18
 3ea:	a9 01       	movw	r20, r18
 3ec:	98 01       	movw	r18, r16
 3ee:	2c 0d       	add	r18, r12
 3f0:	3d 1d       	adc	r19, r13
 3f2:	4e 1d       	adc	r20, r14
 3f4:	5f 1d       	adc	r21, r15
 3f6:	0e 94 a9 04 	call	0x952	; 0x952 <__divmodsi4>
	bmp085_rawtemperature = x1 + x2;
 3fa:	c2 0e       	add	r12, r18
 3fc:	d3 1e       	adc	r13, r19
 3fe:	e4 1e       	adc	r14, r20
 400:	f5 1e       	adc	r15, r21
 402:	c0 92 c4 00 	sts	0x00C4, r12
 406:	d0 92 c5 00 	sts	0x00C5, r13
 40a:	e0 92 c6 00 	sts	0x00C6, r14
 40e:	f0 92 c7 00 	sts	0x00C7, r15
}
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	08 95       	ret

00000428 <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
 428:	4f 92       	push	r4
 42a:	5f 92       	push	r5
 42c:	6f 92       	push	r6
 42e:	7f 92       	push	r7
 430:	8f 92       	push	r8
 432:	9f 92       	push	r9
 434:	af 92       	push	r10
 436:	bf 92       	push	r11
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	2b 97       	sbiw	r28, 0x0b	; 11
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
 454:	19 82       	std	Y+1, r1	; 0x01
 456:	1a 82       	std	Y+2, r1	; 0x02
 458:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
 45a:	0e 94 94 01 	call	0x328	; 0x328 <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
 45e:	64 ef       	ldi	r22, 0xF4	; 244
 460:	84 ef       	ldi	r24, 0xF4	; 244
 462:	0e 94 49 00 	call	0x92	; 0x92 <bmp085_writemem>
 466:	83 e6       	ldi	r24, 0x63	; 99
 468:	99 e1       	ldi	r25, 0x19	; 25
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <bmp085_getrawpressure+0x42>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <bmp085_getrawpressure+0x48>
 470:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
 472:	43 e0       	ldi	r20, 0x03	; 3
 474:	be 01       	movw	r22, r28
 476:	6f 5f       	subi	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	86 ef       	ldi	r24, 0xF6	; 246
 47c:	0e 94 5b 00 	call	0xb6	; 0xb6 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
 480:	c0 90 c4 00 	lds	r12, 0x00C4
 484:	d0 90 c5 00 	lds	r13, 0x00C5
 488:	e0 90 c6 00 	lds	r14, 0x00C6
 48c:	f0 90 c7 00 	lds	r15, 0x00C7
 490:	90 ea       	ldi	r25, 0xA0	; 160
 492:	c9 1a       	sub	r12, r25
 494:	9f e0       	ldi	r25, 0x0F	; 15
 496:	d9 0a       	sbc	r13, r25
 498:	e1 08       	sbc	r14, r1
 49a:	f1 08       	sbc	r15, r1
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
 49c:	a7 01       	movw	r20, r14
 49e:	96 01       	movw	r18, r12
 4a0:	c7 01       	movw	r24, r14
 4a2:	b6 01       	movw	r22, r12
 4a4:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsi3>
 4a8:	4b 01       	movw	r8, r22
 4aa:	5c 01       	movw	r10, r24
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
	x1 = (bmp085_regac3 * b6) >> 13;
 4ac:	a0 91 c2 00 	lds	r26, 0x00C2
 4b0:	b0 91 c3 00 	lds	r27, 0x00C3
 4b4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulshisi3>
 4b8:	2b 01       	movw	r4, r22
 4ba:	3c 01       	movw	r6, r24
 4bc:	03 2e       	mov	r0, r19
 4be:	3d e0       	ldi	r19, 0x0D	; 13
 4c0:	75 94       	asr	r7
 4c2:	67 94       	ror	r6
 4c4:	57 94       	ror	r5
 4c6:	47 94       	ror	r4
 4c8:	3a 95       	dec	r19
 4ca:	d1 f7       	brne	.-12     	; 0x4c0 <bmp085_getrawpressure+0x98>
 4cc:	30 2d       	mov	r19, r0
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
 4ce:	a0 91 c8 00 	lds	r26, 0x00C8
 4d2:	b0 91 c9 00 	lds	r27, 0x00C9
 4d6:	a5 01       	movw	r20, r10
 4d8:	94 01       	movw	r18, r8
 4da:	01 2e       	mov	r0, r17
 4dc:	1c e0       	ldi	r17, 0x0C	; 12
 4de:	55 95       	asr	r21
 4e0:	47 95       	ror	r20
 4e2:	37 95       	ror	r19
 4e4:	27 95       	ror	r18
 4e6:	1a 95       	dec	r17
 4e8:	d1 f7       	brne	.-12     	; 0x4de <bmp085_getrawpressure+0xb6>
 4ea:	10 2d       	mov	r17, r0
 4ec:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulshisi3>
 4f0:	bb 27       	eor	r27, r27
 4f2:	97 fd       	sbrc	r25, 7
 4f4:	b0 95       	com	r27
 4f6:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
 4f8:	48 0e       	add	r4, r24
 4fa:	59 1e       	adc	r5, r25
 4fc:	6a 1e       	adc	r6, r26
 4fe:	7b 1e       	adc	r7, r27
 500:	22 e0       	ldi	r18, 0x02	; 2
 502:	42 0e       	add	r4, r18
 504:	51 1c       	adc	r5, r1
 506:	61 1c       	adc	r6, r1
 508:	71 1c       	adc	r7, r1
 50a:	d3 01       	movw	r26, r6
 50c:	c2 01       	movw	r24, r4
 50e:	b5 95       	asr	r27
 510:	a7 95       	ror	r26
 512:	97 95       	ror	r25
 514:	87 95       	ror	r24
 516:	b5 95       	asr	r27
 518:	a7 95       	ror	r26
 51a:	97 95       	ror	r25
 51c:	87 95       	ror	r24
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
 51e:	9c 01       	movw	r18, r24
 520:	ad 01       	movw	r20, r26
 522:	30 58       	subi	r19, 0x80	; 128
 524:	4f 4f       	sbci	r20, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	a0 91 ba 00 	lds	r26, 0x00BA
 52c:	b0 91 bb 00 	lds	r27, 0x00BB
 530:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
 534:	9b 01       	movw	r18, r22
 536:	ac 01       	movw	r20, r24
 538:	01 2e       	mov	r0, r17
 53a:	1f e0       	ldi	r17, 0x0F	; 15
 53c:	56 95       	lsr	r21
 53e:	47 95       	ror	r20
 540:	37 95       	ror	r19
 542:	27 95       	ror	r18
 544:	1a 95       	dec	r17
 546:	d1 f7       	brne	.-12     	; 0x53c <bmp085_getrawpressure+0x114>
 548:	10 2d       	mov	r17, r0
 54a:	28 87       	std	Y+8, r18	; 0x08
 54c:	39 87       	std	Y+9, r19	; 0x09
 54e:	4a 87       	std	Y+10, r20	; 0x0a
 550:	5b 87       	std	Y+11, r21	; 0x0b

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
 552:	29 81       	ldd	r18, Y+1	; 0x01
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	a0 e0       	ldi	r26, 0x00	; 0
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	ba 2f       	mov	r27, r26
 55e:	a9 2f       	mov	r26, r25
 560:	98 2f       	mov	r25, r24
 562:	88 27       	eor	r24, r24
 564:	a2 2b       	or	r26, r18
 566:	2b 81       	ldd	r18, Y+3	; 0x03
 568:	82 2b       	or	r24, r18
 56a:	9c 01       	movw	r18, r24
 56c:	ad 01       	movw	r20, r26
 56e:	68 94       	set
 570:	14 f8       	bld	r1, 4
 572:	55 95       	asr	r21
 574:	47 95       	ror	r20
 576:	37 95       	ror	r19
 578:	27 95       	ror	r18
 57a:	16 94       	lsr	r1
 57c:	d1 f7       	brne	.-12     	; 0x572 <bmp085_getrawpressure+0x14a>
 57e:	2c 83       	std	Y+4, r18	; 0x04
 580:	3d 83       	std	Y+5, r19	; 0x05
 582:	4e 83       	std	Y+6, r20	; 0x06
 584:	5f 83       	std	Y+7, r21	; 0x07
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
 586:	40 90 ce 00 	lds	r4, 0x00CE
 58a:	50 90 cf 00 	lds	r5, 0x00CF
 58e:	66 24       	eor	r6, r6
 590:	57 fc       	sbrc	r5, 7
 592:	60 94       	com	r6
 594:	76 2c       	mov	r7, r6
 596:	44 0c       	add	r4, r4
 598:	55 1c       	adc	r5, r5
 59a:	66 1c       	adc	r6, r6
 59c:	77 1c       	adc	r7, r7
 59e:	44 0c       	add	r4, r4
 5a0:	55 1c       	adc	r5, r5
 5a2:	66 1c       	adc	r6, r6
 5a4:	77 1c       	adc	r7, r7
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
 5a6:	a0 91 bc 00 	lds	r26, 0x00BC
 5aa:	b0 91 bd 00 	lds	r27, 0x00BD
 5ae:	a5 01       	movw	r20, r10
 5b0:	94 01       	movw	r18, r8
 5b2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulshisi3>
 5b6:	4b 01       	movw	r8, r22
 5b8:	5c 01       	movw	r10, r24
 5ba:	07 2e       	mov	r0, r23
 5bc:	77 e1       	ldi	r23, 0x17	; 23
 5be:	b5 94       	asr	r11
 5c0:	a7 94       	ror	r10
 5c2:	97 94       	ror	r9
 5c4:	87 94       	ror	r8
 5c6:	7a 95       	dec	r23
 5c8:	d1 f7       	brne	.-12     	; 0x5be <bmp085_getrawpressure+0x196>
 5ca:	70 2d       	mov	r23, r0
	x2 = (bmp085_regac2 * b6) >> 11;
 5cc:	a0 91 d6 00 	lds	r26, 0x00D6
 5d0:	b0 91 d7 00 	lds	r27, 0x00D7
 5d4:	a7 01       	movw	r20, r14
 5d6:	96 01       	movw	r18, r12
 5d8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulshisi3>
 5dc:	dc 01       	movw	r26, r24
 5de:	cb 01       	movw	r24, r22
 5e0:	07 2e       	mov	r0, r23
 5e2:	7b e0       	ldi	r23, 0x0B	; 11
 5e4:	b5 95       	asr	r27
 5e6:	a7 95       	ror	r26
 5e8:	97 95       	ror	r25
 5ea:	87 95       	ror	r24
 5ec:	7a 95       	dec	r23
 5ee:	d1 f7       	brne	.-12     	; 0x5e4 <bmp085_getrawpressure+0x1bc>
 5f0:	70 2d       	mov	r23, r0
	x3 = x1 + x2;
 5f2:	88 0e       	add	r8, r24
 5f4:	99 1e       	adc	r9, r25
 5f6:	aa 1e       	adc	r10, r26
 5f8:	bb 1e       	adc	r11, r27
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
 5fa:	48 0c       	add	r4, r8
 5fc:	59 1c       	adc	r5, r9
 5fe:	6a 1c       	adc	r6, r10
 600:	7b 1c       	adc	r7, r11
 602:	44 0c       	add	r4, r4
 604:	55 1c       	adc	r5, r5
 606:	66 1c       	adc	r6, r6
 608:	77 1c       	adc	r7, r7
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
 60a:	2c 81       	ldd	r18, Y+4	; 0x04
 60c:	3d 81       	ldd	r19, Y+5	; 0x05
 60e:	4e 81       	ldd	r20, Y+6	; 0x06
 610:	5f 81       	ldd	r21, Y+7	; 0x07
 612:	24 19       	sub	r18, r4
 614:	35 09       	sbc	r19, r5
 616:	46 09       	sbc	r20, r6
 618:	57 09       	sbc	r21, r7
 61a:	aa e6       	ldi	r26, 0x6A	; 106
 61c:	b8 e1       	ldi	r27, 0x18	; 24
 61e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
 622:	99 23       	and	r25, r25
 624:	6c f0       	brlt	.+26     	; 0x640 <bmp085_getrawpressure+0x218>
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	28 85       	ldd	r18, Y+8	; 0x08
 630:	39 85       	ldd	r19, Y+9	; 0x09
 632:	4a 85       	ldd	r20, Y+10	; 0x0a
 634:	5b 85       	ldd	r21, Y+11	; 0x0b
 636:	0e 94 87 04 	call	0x90e	; 0x90e <__udivmodsi4>
 63a:	69 01       	movw	r12, r18
 63c:	7a 01       	movw	r14, r20
 63e:	0c c0       	rjmp	.+24     	; 0x658 <bmp085_getrawpressure+0x230>
 640:	28 85       	ldd	r18, Y+8	; 0x08
 642:	39 85       	ldd	r19, Y+9	; 0x09
 644:	4a 85       	ldd	r20, Y+10	; 0x0a
 646:	5b 85       	ldd	r21, Y+11	; 0x0b
 648:	0e 94 87 04 	call	0x90e	; 0x90e <__udivmodsi4>
 64c:	69 01       	movw	r12, r18
 64e:	7a 01       	movw	r14, r20
 650:	cc 0c       	add	r12, r12
 652:	dd 1c       	adc	r13, r13
 654:	ee 1c       	adc	r14, r14
 656:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
 658:	99 27       	eor	r25, r25
 65a:	f7 fc       	sbrc	r15, 7
 65c:	9a 95       	dec	r25
 65e:	8f 2d       	mov	r24, r15
 660:	7e 2d       	mov	r23, r14
 662:	6d 2d       	mov	r22, r13
 664:	9b 01       	movw	r18, r22
 666:	ac 01       	movw	r20, r24
 668:	0e 94 77 04 	call	0x8ee	; 0x8ee <__mulsi3>
 66c:	9b 01       	movw	r18, r22
 66e:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
 670:	ae ed       	ldi	r26, 0xDE	; 222
 672:	bb e0       	ldi	r27, 0x0B	; 11
 674:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
 678:	4c 01       	movw	r8, r24
 67a:	bb 24       	eor	r11, r11
 67c:	97 fc       	sbrc	r9, 7
 67e:	b0 94       	com	r11
 680:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
 682:	a3 e4       	ldi	r26, 0x43	; 67
 684:	b3 ee       	ldi	r27, 0xE3	; 227
 686:	a7 01       	movw	r20, r14
 688:	96 01       	movw	r18, r12
 68a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulohisi3>
 68e:	bb 27       	eor	r27, r27
 690:	97 fd       	sbrc	r25, 7
 692:	b0 95       	com	r27
 694:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
 696:	88 0e       	add	r8, r24
 698:	99 1e       	adc	r9, r25
 69a:	aa 1e       	adc	r10, r26
 69c:	bb 1e       	adc	r11, r27
 69e:	3f ec       	ldi	r19, 0xCF	; 207
 6a0:	83 0e       	add	r8, r19
 6a2:	3e e0       	ldi	r19, 0x0E	; 14
 6a4:	93 1e       	adc	r9, r19
 6a6:	a1 1c       	adc	r10, r1
 6a8:	b1 1c       	adc	r11, r1
 6aa:	d5 01       	movw	r26, r10
 6ac:	c4 01       	movw	r24, r8
 6ae:	68 94       	set
 6b0:	13 f8       	bld	r1, 3
 6b2:	b5 95       	asr	r27
 6b4:	a7 95       	ror	r26
 6b6:	97 95       	ror	r25
 6b8:	87 95       	ror	r24
 6ba:	16 94       	lsr	r1
 6bc:	d1 f7       	brne	.-12     	; 0x6b2 <bmp085_getrawpressure+0x28a>
 6be:	bc 01       	movw	r22, r24
 6c0:	cd 01       	movw	r24, r26
 6c2:	6c 0d       	add	r22, r12
 6c4:	7d 1d       	adc	r23, r13
 6c6:	8e 1d       	adc	r24, r14
 6c8:	9f 1d       	adc	r25, r15
 6ca:	60 93 be 00 	sts	0x00BE, r22
 6ce:	70 93 bf 00 	sts	0x00BF, r23
 6d2:	80 93 c0 00 	sts	0x00C0, r24
 6d6:	90 93 c1 00 	sts	0x00C1, r25

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
 6da:	0e 94 95 00 	call	0x12a	; 0x12a <bmp085_avaragefilter>
 6de:	60 93 be 00 	sts	0x00BE, r22
 6e2:	70 93 bf 00 	sts	0x00BF, r23
 6e6:	80 93 c0 00 	sts	0x00C0, r24
 6ea:	90 93 c1 00 	sts	0x00C1, r25
	#endif
}
 6ee:	2b 96       	adiw	r28, 0x0b	; 11
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	de bf       	out	0x3e, r29	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	df 90       	pop	r13
 704:	cf 90       	pop	r12
 706:	bf 90       	pop	r11
 708:	af 90       	pop	r10
 70a:	9f 90       	pop	r9
 70c:	8f 90       	pop	r8
 70e:	7f 90       	pop	r7
 710:	6f 90       	pop	r6
 712:	5f 90       	pop	r5
 714:	4f 90       	pop	r4
 716:	08 95       	ret

00000718 <bmp085_init>:
}

/*
 * init bmp085
 */
void bmp085_init() {
 718:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
 71a:	0e 94 a5 03 	call	0x74a	; 0x74a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71e:	83 e0       	ldi	r24, 0x03	; 3
 720:	8a 95       	dec	r24
 722:	f1 f7       	brne	.-4      	; 0x720 <bmp085_init+0x8>
 724:	00 00       	nop
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
 726:	0e 94 cd 00 	call	0x19a	; 0x19a <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
 72a:	0e 94 94 01 	call	0x328	; 0x328 <bmp085_getrawtemperature>
 72e:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
 730:	0e 94 14 02 	call	0x428	; 0x428 <bmp085_getrawpressure>
 734:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
 736:	e1 f7       	brne	.-8      	; 0x730 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <ds1307_init>:
 * initialize the accellerometer
 */
void ds1307_init() {
	#if DS1307_I2CINIT == 1
	//init i2c
	i2c_init();
 73c:	0e 94 a5 03 	call	0x74a	; 0x74a <i2c_init>
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	8a 95       	dec	r24
 744:	f1 f7       	brne	.-4      	; 0x742 <ds1307_init+0x6>
 746:	00 00       	nop
 748:	08 95       	ret

0000074a <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 74a:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 74c:	80 ec       	ldi	r24, 0xC0	; 192
 74e:	80 b9       	out	0x00, r24	; 0
 750:	08 95       	ret

00000752 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 752:	94 ea       	ldi	r25, 0xA4	; 164
 754:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 756:	06 b6       	in	r0, 0x36	; 54
 758:	07 fe       	sbrs	r0, 7
 75a:	fd cf       	rjmp	.-6      	; 0x756 <i2c_start+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 75c:	91 b1       	in	r25, 0x01	; 1
 75e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 760:	98 30       	cpi	r25, 0x08	; 8
 762:	11 f0       	breq	.+4      	; 0x768 <i2c_start+0x16>
 764:	90 31       	cpi	r25, 0x10	; 16
 766:	79 f4       	brne	.+30     	; 0x786 <i2c_start+0x34>

	// send device address
	TWDR = address;
 768:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 76a:	84 e8       	ldi	r24, 0x84	; 132
 76c:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 76e:	06 b6       	in	r0, 0x36	; 54
 770:	07 fe       	sbrs	r0, 7
 772:	fd cf       	rjmp	.-6      	; 0x76e <i2c_start+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 774:	91 b1       	in	r25, 0x01	; 1
 776:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 778:	98 31       	cpi	r25, 0x18	; 24
 77a:	39 f0       	breq	.+14     	; 0x78a <i2c_start+0x38>
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 34       	cpi	r25, 0x40	; 64
 780:	29 f4       	brne	.+10     	; 0x78c <i2c_start+0x3a>
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 78a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 78c:	08 95       	ret

0000078e <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 78e:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
 790:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 792:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 794:	26 bf       	out	0x36, r18	; 54
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 796:	06 b6       	in	r0, 0x36	; 54
 798:	07 fe       	sbrs	r0, 7
 79a:	fd cf       	rjmp	.-6      	; 0x796 <i2c_start_wait+0x8>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 79c:	91 b1       	in	r25, 0x01	; 1
 79e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 7a0:	98 30       	cpi	r25, 0x08	; 8
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <i2c_start_wait+0x1a>
 7a4:	90 31       	cpi	r25, 0x10	; 16
 7a6:	b1 f7       	brne	.-20     	; 0x794 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
 7a8:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
 7aa:	36 bf       	out	0x36, r19	; 54
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 7ac:	06 b6       	in	r0, 0x36	; 54
 7ae:	07 fe       	sbrs	r0, 7
 7b0:	fd cf       	rjmp	.-6      	; 0x7ac <i2c_start_wait+0x1e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 7b2:	91 b1       	in	r25, 0x01	; 1
 7b4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 7b6:	90 32       	cpi	r25, 0x20	; 32
 7b8:	11 f0       	breq	.+4      	; 0x7be <i2c_start_wait+0x30>
 7ba:	98 35       	cpi	r25, 0x58	; 88
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <i2c_start_wait+0x3a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 7be:	46 bf       	out	0x36, r20	; 54
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 7c0:	06 b6       	in	r0, 0x36	; 54
 7c2:	04 fc       	sbrc	r0, 4
 7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <i2c_start_wait+0x32>
 7c6:	e6 cf       	rjmp	.-52     	; 0x794 <i2c_start_wait+0x6>
 7c8:	08 95       	ret

000007ca <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 7ca:	0e 94 a9 03 	call	0x752	; 0x752 <i2c_start>

}/* i2c_rep_start */
 7ce:	08 95       	ret

000007d0 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 7d0:	84 e9       	ldi	r24, 0x94	; 148
 7d2:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 7d4:	06 b6       	in	r0, 0x36	; 54
 7d6:	04 fc       	sbrc	r0, 4
 7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <i2c_stop+0x4>

}/* i2c_stop */
 7da:	08 95       	ret

000007dc <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 7dc:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 7de:	84 e8       	ldi	r24, 0x84	; 132
 7e0:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 7e2:	06 b6       	in	r0, 0x36	; 54
 7e4:	07 fe       	sbrs	r0, 7
 7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 7e8:	91 b1       	in	r25, 0x01	; 1
 7ea:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	98 32       	cpi	r25, 0x28	; 40
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <i2c_write+0x18>
 7f2:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 7f4:	08 95       	ret

000007f6 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 7f6:	84 ec       	ldi	r24, 0xC4	; 196
 7f8:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
 7fa:	06 b6       	in	r0, 0x36	; 54
 7fc:	07 fe       	sbrs	r0, 7
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <i2c_readAck+0x4>

    return TWDR;
 800:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
 802:	08 95       	ret

00000804 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 804:	84 e8       	ldi	r24, 0x84	; 132
 806:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 808:	06 b6       	in	r0, 0x36	; 54
 80a:	07 fe       	sbrs	r0, 7
 80c:	fd cf       	rjmp	.-6      	; 0x808 <i2c_readNak+0x4>
	
    return TWDR;
 80e:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
 810:	08 95       	ret

00000812 <Flash_Enable>:

//***************************************************************************************************

void Flash_Enable()
{
	LCD_Control |= (1<<Enable);
 812:	c2 9a       	sbi	0x18, 2	; 24
	asm volatile ("nop");
 814:	00 00       	nop
	asm volatile ("nop");
 816:	00 00       	nop
	LCD_Control &= ~(1<<Enable);
 818:	c2 98       	cbi	0x18, 2	; 24
 81a:	08 95       	ret

0000081c <Check_if_LCD_is_busy>:

//***************************************************************************************************

void Check_if_LCD_is_busy()
{
	DataDir_DataBus = 0;			// set for input
 81c:	11 ba       	out	0x11, r1	; 17
	LCD_Control |= (1<<ReadWrite);	// read from the LCD
 81e:	c1 9a       	sbi	0x18, 1	; 24
	LCD_Control &= ~(1<<RS);		// set for command mode
 820:	c0 98       	cbi	0x18, 0	; 24
	
		while(DataBus >=80)			// keep flashing Enable until the LCD is no longer busy
 822:	82 b3       	in	r24, 0x12	; 18
 824:	80 35       	cpi	r24, 0x50	; 80
 826:	28 f0       	brcs	.+10     	; 0x832 <Check_if_LCD_is_busy+0x16>
		{
		Flash_Enable();
 828:	0e 94 09 04 	call	0x812	; 0x812 <Flash_Enable>
{
	DataDir_DataBus = 0;			// set for input
	LCD_Control |= (1<<ReadWrite);	// read from the LCD
	LCD_Control &= ~(1<<RS);		// set for command mode
	
		while(DataBus >=80)			// keep flashing Enable until the LCD is no longer busy
 82c:	82 b3       	in	r24, 0x12	; 18
 82e:	80 35       	cpi	r24, 0x50	; 80
 830:	d8 f7       	brcc	.-10     	; 0x828 <Check_if_LCD_is_busy+0xc>
		{
		Flash_Enable();
		}

	DataDir_DataBus = 0xFF;			// set back to output
 832:	8f ef       	ldi	r24, 0xFF	; 255
 834:	81 bb       	out	0x11, r24	; 17
 836:	08 95       	ret

00000838 <Send_Command>:
}

//***************************************************************************************************

void Send_Command(unsigned char command)
{
 838:	cf 93       	push	r28
 83a:	c8 2f       	mov	r28, r24
	Check_if_LCD_is_busy();
 83c:	0e 94 0e 04 	call	0x81c	; 0x81c <Check_if_LCD_is_busy>
	DataBus = command;
 840:	c2 bb       	out	0x12, r28	; 18
	LCD_Control &= ~((1<<RS) | (1<<ReadWrite));
 842:	88 b3       	in	r24, 0x18	; 24
 844:	8c 7f       	andi	r24, 0xFC	; 252
 846:	88 bb       	out	0x18, r24	; 24
	Flash_Enable();
 848:	0e 94 09 04 	call	0x812	; 0x812 <Flash_Enable>
	DataBus = 0;
 84c:	12 ba       	out	0x12, r1	; 18
}
 84e:	cf 91       	pop	r28
 850:	08 95       	ret

00000852 <Initialize_LCD>:

//***************************************************************************************************

void Initialize_LCD()
{
	DataDir_LCD_Control |= (1<<Enable) | (1<<ReadWrite) | (1<<RS);
 852:	87 b3       	in	r24, 0x17	; 23
 854:	87 60       	ori	r24, 0x07	; 7
 856:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 858:	8f e5       	ldi	r24, 0x5F	; 95
 85a:	9a ee       	ldi	r25, 0xEA	; 234
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	f1 f7       	brne	.-4      	; 0x85c <Initialize_LCD+0xa>
 860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
 862:	00 00       	nop
	_delay_ms(15);
	Send_Command(0x01);			// clear the screen
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	0e 94 1c 04 	call	0x838	; 0x838 <Send_Command>
 86a:	8f e3       	ldi	r24, 0x3F	; 63
 86c:	9f e1       	ldi	r25, 0x1F	; 31
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	f1 f7       	brne	.-4      	; 0x86e <__stack+0xf>
 872:	00 c0       	rjmp	.+0      	; 0x874 <__stack+0x15>
 874:	00 00       	nop
	_delay_ms(2);
	Send_Command(0x38);			// set for 8-bit mode // 0x20 for 4-bit?
 876:	88 e3       	ldi	r24, 0x38	; 56
 878:	0e 94 1c 04 	call	0x838	; 0x838 <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 87c:	87 ec       	ldi	r24, 0xC7	; 199
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	01 97       	sbiw	r24, 0x01	; 1
 882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x21>
 884:	00 c0       	rjmp	.+0      	; 0x886 <__stack+0x27>
 886:	00 00       	nop
	_delay_us(50);
	Send_Command(0b00001100);	// screen: display on, cursor off, blink off
 888:	8c e0       	ldi	r24, 0x0C	; 12
 88a:	0e 94 1c 04 	call	0x838	; 0x838 <Send_Command>
 88e:	87 ec       	ldi	r24, 0xC7	; 199
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	01 97       	sbiw	r24, 0x01	; 1
 894:	f1 f7       	brne	.-4      	; 0x892 <__stack+0x33>
 896:	00 c0       	rjmp	.+0      	; 0x898 <__stack+0x39>
 898:	00 00       	nop
 89a:	08 95       	ret

0000089c <Send_Character>:
}

//***************************************************************************************************

void Send_Character(unsigned char character)
{
 89c:	cf 93       	push	r28
 89e:	c8 2f       	mov	r28, r24
	Check_if_LCD_is_busy();
 8a0:	0e 94 0e 04 	call	0x81c	; 0x81c <Check_if_LCD_is_busy>
	DataBus = character;
 8a4:	c2 bb       	out	0x12, r28	; 18
	LCD_Control &= ~(1<<ReadWrite);
 8a6:	c1 98       	cbi	0x18, 1	; 24
	LCD_Control |= (1<<RS);
 8a8:	c0 9a       	sbi	0x18, 0	; 24
	Flash_Enable();
 8aa:	0e 94 09 04 	call	0x812	; 0x812 <Flash_Enable>
	DataBus = 0;
 8ae:	12 ba       	out	0x12, r1	; 18
}
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <Send_String>:

//***************************************************************************************************

void Send_String(char *stringOfCharacters)
{
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	ec 01       	movw	r28, r24
	while(*stringOfCharacters>0)
 8ba:	88 81       	ld	r24, Y
 8bc:	88 23       	and	r24, r24
 8be:	31 f0       	breq	.+12     	; 0x8cc <Send_String+0x18>
 8c0:	21 96       	adiw	r28, 0x01	; 1
	{
	Send_Character(*stringOfCharacters++);
 8c2:	0e 94 4e 04 	call	0x89c	; 0x89c <Send_Character>

//***************************************************************************************************

void Send_String(char *stringOfCharacters)
{
	while(*stringOfCharacters>0)
 8c6:	89 91       	ld	r24, Y+
 8c8:	81 11       	cpse	r24, r1
 8ca:	fb cf       	rjmp	.-10     	; 0x8c2 <Send_String+0xe>
	{
	Send_Character(*stringOfCharacters++);
	}
}
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	08 95       	ret

000008d2 <main>:
int main(void) {
	long l;
	double d;
	char printbuff[10];
	uint8_t time[6];
	DDRA=0xff;
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 8d6:	1b ba       	out	0x1b, r1	; 27
	
	//init bmp085
	bmp085_init();
 8d8:	0e 94 8c 03 	call	0x718	; 0x718 <bmp085_init>
	ds1307_init();
 8dc:	0e 94 9e 03 	call	0x73c	; 0x73c <ds1307_init>
	Initialize_LCD();
 8e0:	0e 94 29 04 	call	0x852	; 0x852 <Initialize_LCD>

	//main loop
	while(1)
	{
	
		Send_String("Test");
 8e4:	80 e6       	ldi	r24, 0x60	; 96
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Send_String>
 8ec:	fb cf       	rjmp	.-10     	; 0x8e4 <main+0x12>

000008ee <__mulsi3>:
 8ee:	db 01       	movw	r26, r22
 8f0:	8f 93       	push	r24
 8f2:	9f 93       	push	r25
 8f4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
 8f8:	bf 91       	pop	r27
 8fa:	af 91       	pop	r26
 8fc:	a2 9f       	mul	r26, r18
 8fe:	80 0d       	add	r24, r0
 900:	91 1d       	adc	r25, r1
 902:	a3 9f       	mul	r26, r19
 904:	90 0d       	add	r25, r0
 906:	b2 9f       	mul	r27, r18
 908:	90 0d       	add	r25, r0
 90a:	11 24       	eor	r1, r1
 90c:	08 95       	ret

0000090e <__udivmodsi4>:
 90e:	a1 e2       	ldi	r26, 0x21	; 33
 910:	1a 2e       	mov	r1, r26
 912:	aa 1b       	sub	r26, r26
 914:	bb 1b       	sub	r27, r27
 916:	fd 01       	movw	r30, r26
 918:	0d c0       	rjmp	.+26     	; 0x934 <__udivmodsi4_ep>

0000091a <__udivmodsi4_loop>:
 91a:	aa 1f       	adc	r26, r26
 91c:	bb 1f       	adc	r27, r27
 91e:	ee 1f       	adc	r30, r30
 920:	ff 1f       	adc	r31, r31
 922:	a2 17       	cp	r26, r18
 924:	b3 07       	cpc	r27, r19
 926:	e4 07       	cpc	r30, r20
 928:	f5 07       	cpc	r31, r21
 92a:	20 f0       	brcs	.+8      	; 0x934 <__udivmodsi4_ep>
 92c:	a2 1b       	sub	r26, r18
 92e:	b3 0b       	sbc	r27, r19
 930:	e4 0b       	sbc	r30, r20
 932:	f5 0b       	sbc	r31, r21

00000934 <__udivmodsi4_ep>:
 934:	66 1f       	adc	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	1a 94       	dec	r1
 93e:	69 f7       	brne	.-38     	; 0x91a <__udivmodsi4_loop>
 940:	60 95       	com	r22
 942:	70 95       	com	r23
 944:	80 95       	com	r24
 946:	90 95       	com	r25
 948:	9b 01       	movw	r18, r22
 94a:	ac 01       	movw	r20, r24
 94c:	bd 01       	movw	r22, r26
 94e:	cf 01       	movw	r24, r30
 950:	08 95       	ret

00000952 <__divmodsi4>:
 952:	05 2e       	mov	r0, r21
 954:	97 fb       	bst	r25, 7
 956:	1e f4       	brtc	.+6      	; 0x95e <__divmodsi4+0xc>
 958:	00 94       	com	r0
 95a:	0e 94 c0 04 	call	0x980	; 0x980 <__negsi2>
 95e:	57 fd       	sbrc	r21, 7
 960:	07 d0       	rcall	.+14     	; 0x970 <__divmodsi4_neg2>
 962:	0e 94 87 04 	call	0x90e	; 0x90e <__udivmodsi4>
 966:	07 fc       	sbrc	r0, 7
 968:	03 d0       	rcall	.+6      	; 0x970 <__divmodsi4_neg2>
 96a:	4e f4       	brtc	.+18     	; 0x97e <__divmodsi4_exit>
 96c:	0c 94 c0 04 	jmp	0x980	; 0x980 <__negsi2>

00000970 <__divmodsi4_neg2>:
 970:	50 95       	com	r21
 972:	40 95       	com	r20
 974:	30 95       	com	r19
 976:	21 95       	neg	r18
 978:	3f 4f       	sbci	r19, 0xFF	; 255
 97a:	4f 4f       	sbci	r20, 0xFF	; 255
 97c:	5f 4f       	sbci	r21, 0xFF	; 255

0000097e <__divmodsi4_exit>:
 97e:	08 95       	ret

00000980 <__negsi2>:
 980:	90 95       	com	r25
 982:	80 95       	com	r24
 984:	70 95       	com	r23
 986:	61 95       	neg	r22
 988:	7f 4f       	sbci	r23, 0xFF	; 255
 98a:	8f 4f       	sbci	r24, 0xFF	; 255
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	08 95       	ret

00000990 <__umulhisi3>:
 990:	a2 9f       	mul	r26, r18
 992:	b0 01       	movw	r22, r0
 994:	b3 9f       	mul	r27, r19
 996:	c0 01       	movw	r24, r0
 998:	a3 9f       	mul	r26, r19
 99a:	70 0d       	add	r23, r0
 99c:	81 1d       	adc	r24, r1
 99e:	11 24       	eor	r1, r1
 9a0:	91 1d       	adc	r25, r1
 9a2:	b2 9f       	mul	r27, r18
 9a4:	70 0d       	add	r23, r0
 9a6:	81 1d       	adc	r24, r1
 9a8:	11 24       	eor	r1, r1
 9aa:	91 1d       	adc	r25, r1
 9ac:	08 95       	ret

000009ae <__muluhisi3>:
 9ae:	0e 94 c8 04 	call	0x990	; 0x990 <__umulhisi3>
 9b2:	a5 9f       	mul	r26, r21
 9b4:	90 0d       	add	r25, r0
 9b6:	b4 9f       	mul	r27, r20
 9b8:	90 0d       	add	r25, r0
 9ba:	a4 9f       	mul	r26, r20
 9bc:	80 0d       	add	r24, r0
 9be:	91 1d       	adc	r25, r1
 9c0:	11 24       	eor	r1, r1
 9c2:	08 95       	ret

000009c4 <__mulshisi3>:
 9c4:	b7 ff       	sbrs	r27, 7
 9c6:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__muluhisi3>

000009ca <__mulohisi3>:
 9ca:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
 9ce:	82 1b       	sub	r24, r18
 9d0:	93 0b       	sbc	r25, r19
 9d2:	08 95       	ret

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
