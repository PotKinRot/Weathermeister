
Weathermeister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000c10  00000ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  0080006c  0080006c  00000cb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019ee  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000653  00000000  00000000  00002806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070d  00000000  00000000  00002e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000564  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018b1  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00005759  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3d       	cpi	r26, 0xDE	; 222
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 01 05 	call	0xa02	; 0xa02 <main>
  8a:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_init>:

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  92:	11 b8       	out	0x01, r1	; 1
  94:	8a e2       	ldi	r24, 0x2A	; 42
  96:	80 b9       	out	0x00, r24	; 0
  98:	08 95       	ret

0000009a <i2c_start>:

	//write date
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
	i2c_write(0x00);//stop oscillator
	i2c_write(ds1307_dec2bcd(second));
	i2c_write(ds1307_dec2bcd(minute));
  9a:	94 ea       	ldi	r25, 0xA4	; 164
  9c:	96 bf       	out	0x36, r25	; 54
  9e:	06 b6       	in	r0, 0x36	; 54

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <i2c_start+0x4>
  a4:	91 b1       	in	r25, 0x01	; 1
  a6:	98 7f       	andi	r25, 0xF8	; 248
  a8:	98 30       	cpi	r25, 0x08	; 8
  aa:	11 f0       	breq	.+4      	; 0xb0 <i2c_start+0x16>
  ac:	90 31       	cpi	r25, 0x10	; 16
  ae:	79 f4       	brne	.+30     	; 0xce <i2c_start+0x34>
	//write date
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
	i2c_write(0x00);//stop oscillator
	i2c_write(ds1307_dec2bcd(second));
	i2c_write(ds1307_dec2bcd(minute));
	i2c_write(ds1307_dec2bcd(hour));
  b0:	83 b9       	out	0x03, r24	; 3
  b2:	84 e8       	ldi	r24, 0x84	; 132
  b4:	86 bf       	out	0x36, r24	; 54

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  b6:	06 b6       	in	r0, 0x36	; 54
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <i2c_start+0x1c>
  bc:	91 b1       	in	r25, 0x01	; 1
  be:	98 7f       	andi	r25, 0xF8	; 248
  c0:	98 31       	cpi	r25, 0x18	; 24
  c2:	39 f0       	breq	.+14     	; 0xd2 <i2c_start+0x38>
  c4:	81 e0       	ldi	r24, 0x01	; 1
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
	i2c_write(0x00);//stop oscillator
	i2c_write(ds1307_dec2bcd(second));
	i2c_write(ds1307_dec2bcd(minute));
	i2c_write(ds1307_dec2bcd(hour));
	i2c_write(ds1307_dec2bcd(dayofweek));
  c6:	90 34       	cpi	r25, 0x40	; 64
  c8:	29 f4       	brne	.+10     	; 0xd4 <i2c_start+0x3a>
  ca:	80 e0       	ldi	r24, 0x00	; 0

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  cc:	08 95       	ret
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret

000000d6 <i2c_start_wait>:
  d6:	24 ea       	ldi	r18, 0xA4	; 164
  d8:	34 e8       	ldi	r19, 0x84	; 132
  da:	44 e9       	ldi	r20, 0x94	; 148
	i2c_write(0x00);//stop oscillator
	i2c_write(ds1307_dec2bcd(second));
	i2c_write(ds1307_dec2bcd(minute));
	i2c_write(ds1307_dec2bcd(hour));
	i2c_write(ds1307_dec2bcd(dayofweek));
	i2c_write(ds1307_dec2bcd(day));
  dc:	26 bf       	out	0x36, r18	; 54
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  e2:	fd cf       	rjmp	.-6      	; 0xde <i2c_start_wait+0x8>
  e4:	91 b1       	in	r25, 0x01	; 1
  e6:	98 7f       	andi	r25, 0xF8	; 248
  e8:	98 30       	cpi	r25, 0x08	; 8
  ea:	11 f0       	breq	.+4      	; 0xf0 <i2c_start_wait+0x1a>
  ec:	90 31       	cpi	r25, 0x10	; 16
  ee:	b1 f7       	brne	.-20     	; 0xdc <i2c_start_wait+0x6>
  f0:	83 b9       	out	0x03, r24	; 3
	i2c_write(ds1307_dec2bcd(second));
	i2c_write(ds1307_dec2bcd(minute));
	i2c_write(ds1307_dec2bcd(hour));
	i2c_write(ds1307_dec2bcd(dayofweek));
	i2c_write(ds1307_dec2bcd(day));
	i2c_write(ds1307_dec2bcd(month));
  f2:	36 bf       	out	0x36, r19	; 54
  f4:	06 b6       	in	r0, 0x36	; 54
  f6:	07 fe       	sbrs	r0, 7

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <i2c_start_wait+0x1e>
  fa:	91 b1       	in	r25, 0x01	; 1
  fc:	98 7f       	andi	r25, 0xF8	; 248
  fe:	90 32       	cpi	r25, 0x20	; 32
 100:	11 f0       	breq	.+4      	; 0x106 <i2c_start_wait+0x30>
 102:	98 35       	cpi	r25, 0x58	; 88
 104:	29 f4       	brne	.+10     	; 0x110 <i2c_start_wait+0x3a>
 106:	46 bf       	out	0x36, r20	; 54
	i2c_write(ds1307_dec2bcd(minute));
	i2c_write(ds1307_dec2bcd(hour));
	i2c_write(ds1307_dec2bcd(dayofweek));
	i2c_write(ds1307_dec2bcd(day));
	i2c_write(ds1307_dec2bcd(month));
	i2c_write(ds1307_dec2bcd(year));
 108:	06 b6       	in	r0, 0x36	; 54
 10a:	04 fc       	sbrc	r0, 4
 10c:	fd cf       	rjmp	.-6      	; 0x108 <i2c_start_wait+0x32>
	i2c_write(0x00); //start oscillator
 10e:	e6 cf       	rjmp	.-52     	; 0xdc <i2c_start_wait+0x6>
 110:	08 95       	ret

00000112 <i2c_rep_start>:
 112:	0e 94 4d 00 	call	0x9a	; 0x9a <i2c_start>
	i2c_stop();
 116:	08 95       	ret

00000118 <i2c_stop>:

	return 1;
 118:	84 e9       	ldi	r24, 0x94	; 148
 11a:	86 bf       	out	0x36, r24	; 54
		minute < 0 || minute > 59 ||
		hour < 0 || hour > 23 ||
		day < 1 || day > 31 ||
		month < 1 || month > 12 ||
		year < 0 || year > 99)
		return 8;
 11c:	06 b6       	in	r0, 0x36	; 54
 11e:	04 fc       	sbrc	r0, 4
 120:	fd cf       	rjmp	.-6      	; 0x11c <i2c_stop+0x4>
 122:	08 95       	ret

00000124 <i2c_write>:
 124:	83 b9       	out	0x03, r24	; 3
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	86 bf       	out	0x36, r24	; 54
 12a:	06 b6       	in	r0, 0x36	; 54
 12c:	07 fe       	sbrs	r0, 7
 12e:	fd cf       	rjmp	.-6      	; 0x12a <i2c_write+0x6>
 130:	91 b1       	in	r25, 0x01	; 1
 132:	98 7f       	andi	r25, 0xF8	; 248

	//sanitize day based on month
	if(day > pgm_read_byte(ds1307_daysinmonth + month - 1))
		return 0;
 134:	81 e0       	ldi	r24, 0x01	; 1
	i2c_write(ds1307_dec2bcd(year));
	i2c_write(0x00); //start oscillator
	i2c_stop();

	return 1;
}
 136:	98 32       	cpi	r25, 0x28	; 40
 138:	09 f4       	brne	.+2      	; 0x13c <i2c_write+0x18>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret

0000013e <i2c_readAck>:
 13e:	84 ec       	ldi	r24, 0xC4	; 196
 140:	86 bf       	out	0x36, r24	; 54
 142:	06 b6       	in	r0, 0x36	; 54
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <i2c_readAck+0x4>
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;
 148:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
 14a:	08 95       	ret

0000014c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 150:	06 b6       	in	r0, 0x36	; 54
 152:	07 fe       	sbrs	r0, 7
 154:	fd cf       	rjmp	.-6      	; 0x150 <i2c_readNak+0x4>
	
    return TWDR;
 156:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
 158:	08 95       	ret

0000015a <bmp085_writemem>:
/*
 * BMP180 COMMUNICATION
 */


void bmp085_writemem(uint8_t reg, uint8_t value) {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	d8 2f       	mov	r29, r24
 160:	c6 2f       	mov	r28, r22
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
 162:	8e ee       	ldi	r24, 0xEE	; 238
 164:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_start_wait>
	i2c_write(reg);
 168:	8d 2f       	mov	r24, r29
 16a:	0e 94 92 00 	call	0x124	; 0x124 <i2c_write>
	i2c_write(value);
 16e:	8c 2f       	mov	r24, r28
 170:	0e 94 92 00 	call	0x124	; 0x124 <i2c_write>
	i2c_stop();
 174:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <bmp085_readmem>:

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	c8 2f       	mov	r28, r24
 18e:	f6 2e       	mov	r15, r22
 190:	d7 2f       	mov	r29, r23
 192:	d4 2e       	mov	r13, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
 194:	8e ee       	ldi	r24, 0xEE	; 238
 196:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_start_wait>
	i2c_write(reg);
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 92 00 	call	0x124	; 0x124 <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
 1a0:	8f ee       	ldi	r24, 0xEF	; 239
 1a2:	0e 94 89 00 	call	0x112	; 0x112 <i2c_rep_start>
	for(i=0; i<bytes; i++) {
 1a6:	dd 20       	and	r13, r13
 1a8:	d1 f0       	breq	.+52     	; 0x1de <bmp085_readmem+0x60>
 1aa:	0f 2d       	mov	r16, r15
 1ac:	1d 2f       	mov	r17, r29
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
		if(i==bytes-1)
 1b2:	ed 2c       	mov	r14, r13
 1b4:	f1 2c       	mov	r15, r1
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	e8 1a       	sub	r14, r24
 1ba:	f1 08       	sbc	r15, r1
 1bc:	ce 15       	cp	r28, r14
 1be:	df 05       	cpc	r29, r15
 1c0:	29 f4       	brne	.+10     	; 0x1cc <bmp085_readmem+0x4e>
			buff[i] = i2c_readNak();
 1c2:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_readNak>
 1c6:	f8 01       	movw	r30, r16
 1c8:	80 83       	st	Z, r24
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <bmp085_readmem+0x56>
		else
			buff[i] = i2c_readAck();
 1cc:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_readAck>
 1d0:	f8 01       	movw	r30, r16
 1d2:	80 83       	st	Z, r24
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	0f 5f       	subi	r16, 0xFF	; 255
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
 1da:	cd 15       	cp	r28, r13
 1dc:	78 f3       	brcs	.-34     	; 0x1bc <bmp085_readmem+0x3e>
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
 1de:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	08 95       	ret

000001f2 <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	e0 ec       	ldi	r30, 0xC0	; 192
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	cc e6       	ldi	r28, 0x6C	; 108
 200:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
 202:	0c 81       	ldd	r16, Y+4	; 0x04
 204:	1d 81       	ldd	r17, Y+5	; 0x05
 206:	2e 81       	ldd	r18, Y+6	; 0x06
 208:	3f 81       	ldd	r19, Y+7	; 0x07
 20a:	09 93       	st	Y+, r16
 20c:	19 93       	st	Y+, r17
 20e:	29 93       	st	Y+, r18
 210:	39 93       	st	Y+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
 212:	ce 17       	cp	r28, r30
 214:	df 07       	cpc	r29, r31
 216:	a9 f7       	brne	.-22     	; 0x202 <bmp085_avaragefilter+0x10>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
 218:	60 93 bc 00 	sts	0x00BC, r22
 21c:	70 93 bd 00 	sts	0x00BD, r23
 220:	80 93 be 00 	sts	0x00BE, r24
 224:	90 93 bf 00 	sts	0x00BF, r25
 228:	ac e6       	ldi	r26, 0x6C	; 108
 22a:	b0 e0       	ldi	r27, 0x00	; 0
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
 232:	0d 91       	ld	r16, X+
 234:	1d 91       	ld	r17, X+
 236:	2d 91       	ld	r18, X+
 238:	3d 91       	ld	r19, X+
 23a:	60 0f       	add	r22, r16
 23c:	71 1f       	adc	r23, r17
 23e:	82 1f       	adc	r24, r18
 240:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
 242:	ae 17       	cp	r26, r30
 244:	bf 07       	cpc	r27, r31
 246:	a9 f7       	brne	.-22     	; 0x232 <bmp085_avaragefilter+0x40>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
 248:	25 e1       	ldi	r18, 0x15	; 21
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	0e 94 90 05 	call	0xb20	; 0xb20 <__divmodsi4>
}
 254:	ca 01       	movw	r24, r20
 256:	b9 01       	movw	r22, r18
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	00 d0       	rcall	.+0      	; 0x268 <bmp085_getcalibration+0x6>
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
 26c:	1a 82       	std	Y+2, r1	; 0x02
 26e:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
 270:	42 e0       	ldi	r20, 0x02	; 2
 272:	be 01       	movw	r22, r28
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	8a ea       	ldi	r24, 0xAA	; 170
 27a:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	98 2f       	mov	r25, r24
 284:	88 27       	eor	r24, r24
 286:	2a 81       	ldd	r18, Y+2	; 0x02
 288:	82 2b       	or	r24, r18
 28a:	90 93 d5 00 	sts	0x00D5, r25
 28e:	80 93 d4 00 	sts	0x00D4, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
 292:	42 e0       	ldi	r20, 0x02	; 2
 294:	be 01       	movw	r22, r28
 296:	6f 5f       	subi	r22, 0xFF	; 255
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	8c ea       	ldi	r24, 0xAC	; 172
 29c:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	98 2f       	mov	r25, r24
 2a6:	88 27       	eor	r24, r24
 2a8:	2a 81       	ldd	r18, Y+2	; 0x02
 2aa:	82 2b       	or	r24, r18
 2ac:	90 93 dd 00 	sts	0x00DD, r25
 2b0:	80 93 dc 00 	sts	0x00DC, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
 2b4:	42 e0       	ldi	r20, 0x02	; 2
 2b6:	be 01       	movw	r22, r28
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8e ea       	ldi	r24, 0xAE	; 174
 2be:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	98 2f       	mov	r25, r24
 2c8:	88 27       	eor	r24, r24
 2ca:	2a 81       	ldd	r18, Y+2	; 0x02
 2cc:	82 2b       	or	r24, r18
 2ce:	90 93 c9 00 	sts	0x00C9, r25
 2d2:	80 93 c8 00 	sts	0x00C8, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
 2d6:	42 e0       	ldi	r20, 0x02	; 2
 2d8:	be 01       	movw	r22, r28
 2da:	6f 5f       	subi	r22, 0xFF	; 255
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	80 eb       	ldi	r24, 0xB0	; 176
 2e0:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	98 2f       	mov	r25, r24
 2ea:	88 27       	eor	r24, r24
 2ec:	2a 81       	ldd	r18, Y+2	; 0x02
 2ee:	82 2b       	or	r24, r18
 2f0:	90 93 c1 00 	sts	0x00C1, r25
 2f4:	80 93 c0 00 	sts	0x00C0, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
 2f8:	42 e0       	ldi	r20, 0x02	; 2
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	82 eb       	ldi	r24, 0xB2	; 178
 302:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	98 2f       	mov	r25, r24
 30c:	88 27       	eor	r24, r24
 30e:	2a 81       	ldd	r18, Y+2	; 0x02
 310:	82 2b       	or	r24, r18
 312:	90 93 d9 00 	sts	0x00D9, r25
 316:	80 93 d8 00 	sts	0x00D8, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
 31a:	42 e0       	ldi	r20, 0x02	; 2
 31c:	be 01       	movw	r22, r28
 31e:	6f 5f       	subi	r22, 0xFF	; 255
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	84 eb       	ldi	r24, 0xB4	; 180
 324:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	98 2f       	mov	r25, r24
 32e:	88 27       	eor	r24, r24
 330:	2a 81       	ldd	r18, Y+2	; 0x02
 332:	82 2b       	or	r24, r18
 334:	90 93 d1 00 	sts	0x00D1, r25
 338:	80 93 d0 00 	sts	0x00D0, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
 33c:	42 e0       	ldi	r20, 0x02	; 2
 33e:	be 01       	movw	r22, r28
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	86 eb       	ldi	r24, 0xB6	; 182
 346:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	98 2f       	mov	r25, r24
 350:	88 27       	eor	r24, r24
 352:	2a 81       	ldd	r18, Y+2	; 0x02
 354:	82 2b       	or	r24, r18
 356:	90 93 cf 00 	sts	0x00CF, r25
 35a:	80 93 ce 00 	sts	0x00CE, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
 35e:	42 e0       	ldi	r20, 0x02	; 2
 360:	be 01       	movw	r22, r28
 362:	6f 5f       	subi	r22, 0xFF	; 255
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	88 eb       	ldi	r24, 0xB8	; 184
 368:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	98 2f       	mov	r25, r24
 372:	88 27       	eor	r24, r24
 374:	2a 81       	ldd	r18, Y+2	; 0x02
 376:	82 2b       	or	r24, r18
 378:	90 93 c3 00 	sts	0x00C3, r25
 37c:	80 93 c2 00 	sts	0x00C2, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
 380:	42 e0       	ldi	r20, 0x02	; 2
 382:	be 01       	movw	r22, r28
 384:	6f 5f       	subi	r22, 0xFF	; 255
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	8a eb       	ldi	r24, 0xBA	; 186
 38a:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	98 2f       	mov	r25, r24
 394:	88 27       	eor	r24, r24
 396:	2a 81       	ldd	r18, Y+2	; 0x02
 398:	82 2b       	or	r24, r18
 39a:	90 93 d7 00 	sts	0x00D7, r25
 39e:	80 93 d6 00 	sts	0x00D6, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
 3a2:	42 e0       	ldi	r20, 0x02	; 2
 3a4:	be 01       	movw	r22, r28
 3a6:	6f 5f       	subi	r22, 0xFF	; 255
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	8c eb       	ldi	r24, 0xBC	; 188
 3ac:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	98 2f       	mov	r25, r24
 3b6:	88 27       	eor	r24, r24
 3b8:	2a 81       	ldd	r18, Y+2	; 0x02
 3ba:	82 2b       	or	r24, r18
 3bc:	90 93 db 00 	sts	0x00DB, r25
 3c0:	80 93 da 00 	sts	0x00DA, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
 3c4:	42 e0       	ldi	r20, 0x02	; 2
 3c6:	be 01       	movw	r22, r28
 3c8:	6f 5f       	subi	r22, 0xFF	; 255
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	8e eb       	ldi	r24, 0xBE	; 190
 3ce:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	98 2f       	mov	r25, r24
 3d8:	88 27       	eor	r24, r24
 3da:	2a 81       	ldd	r18, Y+2	; 0x02
 3dc:	82 2b       	or	r24, r18
 3de:	90 93 d3 00 	sts	0x00D3, r25
 3e2:	80 93 d2 00 	sts	0x00D2, r24
}
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
 3f0:	cf 92       	push	r12
 3f2:	df 92       	push	r13
 3f4:	ef 92       	push	r14
 3f6:	ff 92       	push	r15
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	00 d0       	rcall	.+0      	; 0x402 <bmp085_getrawtemperature+0x12>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
 406:	1a 82       	std	Y+2, r1	; 0x02
 408:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
 40a:	6e e2       	ldi	r22, 0x2E	; 46
 40c:	84 ef       	ldi	r24, 0xF4	; 244
 40e:	0e 94 ad 00 	call	0x15a	; 0x15a <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	81 ee       	ldi	r24, 0xE1	; 225
 414:	94 e0       	ldi	r25, 0x04	; 4
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <bmp085_getrawtemperature+0x26>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <bmp085_getrawtemperature+0x2c>
 41c:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
 41e:	42 e0       	ldi	r20, 0x02	; 2
 420:	be 01       	movw	r22, r28
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	86 ef       	ldi	r24, 0xF6	; 246
 428:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
 42c:	29 81       	ldd	r18, Y+1	; 0x01
 42e:	82 2f       	mov	r24, r18
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	a0 e0       	ldi	r26, 0x00	; 0
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	44 27       	eor	r20, r20
 438:	58 2f       	mov	r21, r24
 43a:	69 2f       	mov	r22, r25
 43c:	7a 2f       	mov	r23, r26
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	48 2b       	or	r20, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
 442:	80 91 d0 00 	lds	r24, 0x00D0
 446:	90 91 d1 00 	lds	r25, 0x00D1
 44a:	9a 01       	movw	r18, r20
 44c:	ab 01       	movw	r20, r22
 44e:	28 1b       	sub	r18, r24
 450:	39 0b       	sbc	r19, r25
 452:	41 09       	sbc	r20, r1
 454:	51 09       	sbc	r21, r1
 456:	a0 91 d8 00 	lds	r26, 0x00D8
 45a:	b0 91 d9 00 	lds	r27, 0x00D9
 45e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__muluhisi3>
 462:	6b 01       	movw	r12, r22
 464:	7c 01       	movw	r14, r24
 466:	0b 2e       	mov	r0, r27
 468:	bf e0       	ldi	r27, 0x0F	; 15
 46a:	f5 94       	asr	r15
 46c:	e7 94       	ror	r14
 46e:	d7 94       	ror	r13
 470:	c7 94       	ror	r12
 472:	ba 95       	dec	r27
 474:	d1 f7       	brne	.-12     	; 0x46a <bmp085_getrawtemperature+0x7a>
 476:	b0 2d       	mov	r27, r0
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
 478:	60 91 da 00 	lds	r22, 0x00DA
 47c:	70 91 db 00 	lds	r23, 0x00DB
 480:	cb 01       	movw	r24, r22
 482:	aa 27       	eor	r26, r26
 484:	97 fd       	sbrc	r25, 7
 486:	a0 95       	com	r26
 488:	ba 2f       	mov	r27, r26
 48a:	bc 01       	movw	r22, r24
 48c:	cd 01       	movw	r24, r26
 48e:	05 2e       	mov	r0, r21
 490:	5b e0       	ldi	r21, 0x0B	; 11
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	5a 95       	dec	r21
 49c:	d1 f7       	brne	.-12     	; 0x492 <bmp085_getrawtemperature+0xa2>
 49e:	50 2d       	mov	r21, r0
 4a0:	20 91 d2 00 	lds	r18, 0x00D2
 4a4:	30 91 d3 00 	lds	r19, 0x00D3
 4a8:	89 01       	movw	r16, r18
 4aa:	22 27       	eor	r18, r18
 4ac:	17 fd       	sbrc	r17, 7
 4ae:	20 95       	com	r18
 4b0:	32 2f       	mov	r19, r18
 4b2:	a9 01       	movw	r20, r18
 4b4:	98 01       	movw	r18, r16
 4b6:	2c 0d       	add	r18, r12
 4b8:	3d 1d       	adc	r19, r13
 4ba:	4e 1d       	adc	r20, r14
 4bc:	5f 1d       	adc	r21, r15
 4be:	0e 94 90 05 	call	0xb20	; 0xb20 <__divmodsi4>
	bmp085_rawtemperature = x1 + x2;
 4c2:	c2 0e       	add	r12, r18
 4c4:	d3 1e       	adc	r13, r19
 4c6:	e4 1e       	adc	r14, r20
 4c8:	f5 1e       	adc	r15, r21
 4ca:	c0 92 ca 00 	sts	0x00CA, r12
 4ce:	d0 92 cb 00 	sts	0x00CB, r13
 4d2:	e0 92 cc 00 	sts	0x00CC, r14
 4d6:	f0 92 cd 00 	sts	0x00CD, r15
}
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	08 95       	ret

000004f0 <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
 4f0:	4f 92       	push	r4
 4f2:	5f 92       	push	r5
 4f4:	6f 92       	push	r6
 4f6:	7f 92       	push	r7
 4f8:	8f 92       	push	r8
 4fa:	9f 92       	push	r9
 4fc:	af 92       	push	r10
 4fe:	bf 92       	push	r11
 500:	cf 92       	push	r12
 502:	df 92       	push	r13
 504:	ef 92       	push	r14
 506:	ff 92       	push	r15
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	2b 97       	sbiw	r28, 0x0b	; 11
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
 51c:	19 82       	std	Y+1, r1	; 0x01
 51e:	1a 82       	std	Y+2, r1	; 0x02
 520:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
 522:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
 526:	64 ef       	ldi	r22, 0xF4	; 244
 528:	84 ef       	ldi	r24, 0xF4	; 244
 52a:	0e 94 ad 00 	call	0x15a	; 0x15a <bmp085_writemem>
 52e:	83 e6       	ldi	r24, 0x63	; 99
 530:	99 e1       	ldi	r25, 0x19	; 25
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <bmp085_getrawpressure+0x42>
 536:	00 c0       	rjmp	.+0      	; 0x538 <bmp085_getrawpressure+0x48>
 538:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
 53a:	43 e0       	ldi	r20, 0x03	; 3
 53c:	be 01       	movw	r22, r28
 53e:	6f 5f       	subi	r22, 0xFF	; 255
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	86 ef       	ldi	r24, 0xF6	; 246
 544:	0e 94 bf 00 	call	0x17e	; 0x17e <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
 548:	c0 90 ca 00 	lds	r12, 0x00CA
 54c:	d0 90 cb 00 	lds	r13, 0x00CB
 550:	e0 90 cc 00 	lds	r14, 0x00CC
 554:	f0 90 cd 00 	lds	r15, 0x00CD
 558:	90 ea       	ldi	r25, 0xA0	; 160
 55a:	c9 1a       	sub	r12, r25
 55c:	9f e0       	ldi	r25, 0x0F	; 15
 55e:	d9 0a       	sbc	r13, r25
 560:	e1 08       	sbc	r14, r1
 562:	f1 08       	sbc	r15, r1
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
 564:	a7 01       	movw	r20, r14
 566:	96 01       	movw	r18, r12
 568:	c7 01       	movw	r24, r14
 56a:	b6 01       	movw	r22, r12
 56c:	0e 94 5e 05 	call	0xabc	; 0xabc <__mulsi3>
 570:	4b 01       	movw	r8, r22
 572:	5c 01       	movw	r10, r24
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
	x1 = (bmp085_regac3 * b6) >> 13;
 574:	a0 91 c8 00 	lds	r26, 0x00C8
 578:	b0 91 c9 00 	lds	r27, 0x00C9
 57c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__mulshisi3>
 580:	2b 01       	movw	r4, r22
 582:	3c 01       	movw	r6, r24
 584:	03 2e       	mov	r0, r19
 586:	3d e0       	ldi	r19, 0x0D	; 13
 588:	75 94       	asr	r7
 58a:	67 94       	ror	r6
 58c:	57 94       	ror	r5
 58e:	47 94       	ror	r4
 590:	3a 95       	dec	r19
 592:	d1 f7       	brne	.-12     	; 0x588 <bmp085_getrawpressure+0x98>
 594:	30 2d       	mov	r19, r0
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
 596:	a0 91 ce 00 	lds	r26, 0x00CE
 59a:	b0 91 cf 00 	lds	r27, 0x00CF
 59e:	a5 01       	movw	r20, r10
 5a0:	94 01       	movw	r18, r8
 5a2:	01 2e       	mov	r0, r17
 5a4:	1c e0       	ldi	r17, 0x0C	; 12
 5a6:	55 95       	asr	r21
 5a8:	47 95       	ror	r20
 5aa:	37 95       	ror	r19
 5ac:	27 95       	ror	r18
 5ae:	1a 95       	dec	r17
 5b0:	d1 f7       	brne	.-12     	; 0x5a6 <bmp085_getrawpressure+0xb6>
 5b2:	10 2d       	mov	r17, r0
 5b4:	0e 94 c9 05 	call	0xb92	; 0xb92 <__mulshisi3>
 5b8:	bb 27       	eor	r27, r27
 5ba:	97 fd       	sbrc	r25, 7
 5bc:	b0 95       	com	r27
 5be:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
 5c0:	48 0e       	add	r4, r24
 5c2:	59 1e       	adc	r5, r25
 5c4:	6a 1e       	adc	r6, r26
 5c6:	7b 1e       	adc	r7, r27
 5c8:	22 e0       	ldi	r18, 0x02	; 2
 5ca:	42 0e       	add	r4, r18
 5cc:	51 1c       	adc	r5, r1
 5ce:	61 1c       	adc	r6, r1
 5d0:	71 1c       	adc	r7, r1
 5d2:	d3 01       	movw	r26, r6
 5d4:	c2 01       	movw	r24, r4
 5d6:	b5 95       	asr	r27
 5d8:	a7 95       	ror	r26
 5da:	97 95       	ror	r25
 5dc:	87 95       	ror	r24
 5de:	b5 95       	asr	r27
 5e0:	a7 95       	ror	r26
 5e2:	97 95       	ror	r25
 5e4:	87 95       	ror	r24
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
 5e6:	9c 01       	movw	r18, r24
 5e8:	ad 01       	movw	r20, r26
 5ea:	30 58       	subi	r19, 0x80	; 128
 5ec:	4f 4f       	sbci	r20, 0xFF	; 255
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	a0 91 c0 00 	lds	r26, 0x00C0
 5f4:	b0 91 c1 00 	lds	r27, 0x00C1
 5f8:	0e 94 be 05 	call	0xb7c	; 0xb7c <__muluhisi3>
 5fc:	9b 01       	movw	r18, r22
 5fe:	ac 01       	movw	r20, r24
 600:	01 2e       	mov	r0, r17
 602:	1f e0       	ldi	r17, 0x0F	; 15
 604:	56 95       	lsr	r21
 606:	47 95       	ror	r20
 608:	37 95       	ror	r19
 60a:	27 95       	ror	r18
 60c:	1a 95       	dec	r17
 60e:	d1 f7       	brne	.-12     	; 0x604 <bmp085_getrawpressure+0x114>
 610:	10 2d       	mov	r17, r0
 612:	28 87       	std	Y+8, r18	; 0x08
 614:	39 87       	std	Y+9, r19	; 0x09
 616:	4a 87       	std	Y+10, r20	; 0x0a
 618:	5b 87       	std	Y+11, r21	; 0x0b

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
 61a:	29 81       	ldd	r18, Y+1	; 0x01
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	a0 e0       	ldi	r26, 0x00	; 0
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	ba 2f       	mov	r27, r26
 626:	a9 2f       	mov	r26, r25
 628:	98 2f       	mov	r25, r24
 62a:	88 27       	eor	r24, r24
 62c:	a2 2b       	or	r26, r18
 62e:	2b 81       	ldd	r18, Y+3	; 0x03
 630:	82 2b       	or	r24, r18
 632:	9c 01       	movw	r18, r24
 634:	ad 01       	movw	r20, r26
 636:	68 94       	set
 638:	14 f8       	bld	r1, 4
 63a:	55 95       	asr	r21
 63c:	47 95       	ror	r20
 63e:	37 95       	ror	r19
 640:	27 95       	ror	r18
 642:	16 94       	lsr	r1
 644:	d1 f7       	brne	.-12     	; 0x63a <bmp085_getrawpressure+0x14a>
 646:	2c 83       	std	Y+4, r18	; 0x04
 648:	3d 83       	std	Y+5, r19	; 0x05
 64a:	4e 83       	std	Y+6, r20	; 0x06
 64c:	5f 83       	std	Y+7, r21	; 0x07
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
 64e:	40 90 d4 00 	lds	r4, 0x00D4
 652:	50 90 d5 00 	lds	r5, 0x00D5
 656:	66 24       	eor	r6, r6
 658:	57 fc       	sbrc	r5, 7
 65a:	60 94       	com	r6
 65c:	76 2c       	mov	r7, r6
 65e:	44 0c       	add	r4, r4
 660:	55 1c       	adc	r5, r5
 662:	66 1c       	adc	r6, r6
 664:	77 1c       	adc	r7, r7
 666:	44 0c       	add	r4, r4
 668:	55 1c       	adc	r5, r5
 66a:	66 1c       	adc	r6, r6
 66c:	77 1c       	adc	r7, r7
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
 66e:	a0 91 c2 00 	lds	r26, 0x00C2
 672:	b0 91 c3 00 	lds	r27, 0x00C3
 676:	a5 01       	movw	r20, r10
 678:	94 01       	movw	r18, r8
 67a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__mulshisi3>
 67e:	4b 01       	movw	r8, r22
 680:	5c 01       	movw	r10, r24
 682:	07 2e       	mov	r0, r23
 684:	77 e1       	ldi	r23, 0x17	; 23
 686:	b5 94       	asr	r11
 688:	a7 94       	ror	r10
 68a:	97 94       	ror	r9
 68c:	87 94       	ror	r8
 68e:	7a 95       	dec	r23
 690:	d1 f7       	brne	.-12     	; 0x686 <bmp085_getrawpressure+0x196>
 692:	70 2d       	mov	r23, r0
	x2 = (bmp085_regac2 * b6) >> 11;
 694:	a0 91 dc 00 	lds	r26, 0x00DC
 698:	b0 91 dd 00 	lds	r27, 0x00DD
 69c:	a7 01       	movw	r20, r14
 69e:	96 01       	movw	r18, r12
 6a0:	0e 94 c9 05 	call	0xb92	; 0xb92 <__mulshisi3>
 6a4:	dc 01       	movw	r26, r24
 6a6:	cb 01       	movw	r24, r22
 6a8:	07 2e       	mov	r0, r23
 6aa:	7b e0       	ldi	r23, 0x0B	; 11
 6ac:	b5 95       	asr	r27
 6ae:	a7 95       	ror	r26
 6b0:	97 95       	ror	r25
 6b2:	87 95       	ror	r24
 6b4:	7a 95       	dec	r23
 6b6:	d1 f7       	brne	.-12     	; 0x6ac <bmp085_getrawpressure+0x1bc>
 6b8:	70 2d       	mov	r23, r0
	x3 = x1 + x2;
 6ba:	88 0e       	add	r8, r24
 6bc:	99 1e       	adc	r9, r25
 6be:	aa 1e       	adc	r10, r26
 6c0:	bb 1e       	adc	r11, r27
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
 6c2:	48 0c       	add	r4, r8
 6c4:	59 1c       	adc	r5, r9
 6c6:	6a 1c       	adc	r6, r10
 6c8:	7b 1c       	adc	r7, r11
 6ca:	44 0c       	add	r4, r4
 6cc:	55 1c       	adc	r5, r5
 6ce:	66 1c       	adc	r6, r6
 6d0:	77 1c       	adc	r7, r7
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
 6d2:	2c 81       	ldd	r18, Y+4	; 0x04
 6d4:	3d 81       	ldd	r19, Y+5	; 0x05
 6d6:	4e 81       	ldd	r20, Y+6	; 0x06
 6d8:	5f 81       	ldd	r21, Y+7	; 0x07
 6da:	24 19       	sub	r18, r4
 6dc:	35 09       	sbc	r19, r5
 6de:	46 09       	sbc	r20, r6
 6e0:	57 09       	sbc	r21, r7
 6e2:	aa e6       	ldi	r26, 0x6A	; 106
 6e4:	b8 e1       	ldi	r27, 0x18	; 24
 6e6:	0e 94 be 05 	call	0xb7c	; 0xb7c <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
 6ea:	99 23       	and	r25, r25
 6ec:	6c f0       	brlt	.+26     	; 0x708 <bmp085_getrawpressure+0x218>
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	28 85       	ldd	r18, Y+8	; 0x08
 6f8:	39 85       	ldd	r19, Y+9	; 0x09
 6fa:	4a 85       	ldd	r20, Y+10	; 0x0a
 6fc:	5b 85       	ldd	r21, Y+11	; 0x0b
 6fe:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodsi4>
 702:	69 01       	movw	r12, r18
 704:	7a 01       	movw	r14, r20
 706:	0c c0       	rjmp	.+24     	; 0x720 <bmp085_getrawpressure+0x230>
 708:	28 85       	ldd	r18, Y+8	; 0x08
 70a:	39 85       	ldd	r19, Y+9	; 0x09
 70c:	4a 85       	ldd	r20, Y+10	; 0x0a
 70e:	5b 85       	ldd	r21, Y+11	; 0x0b
 710:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodsi4>
 714:	69 01       	movw	r12, r18
 716:	7a 01       	movw	r14, r20
 718:	cc 0c       	add	r12, r12
 71a:	dd 1c       	adc	r13, r13
 71c:	ee 1c       	adc	r14, r14
 71e:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
 720:	99 27       	eor	r25, r25
 722:	f7 fc       	sbrc	r15, 7
 724:	9a 95       	dec	r25
 726:	8f 2d       	mov	r24, r15
 728:	7e 2d       	mov	r23, r14
 72a:	6d 2d       	mov	r22, r13
 72c:	9b 01       	movw	r18, r22
 72e:	ac 01       	movw	r20, r24
 730:	0e 94 5e 05 	call	0xabc	; 0xabc <__mulsi3>
 734:	9b 01       	movw	r18, r22
 736:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
 738:	ae ed       	ldi	r26, 0xDE	; 222
 73a:	bb e0       	ldi	r27, 0x0B	; 11
 73c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__muluhisi3>
 740:	4c 01       	movw	r8, r24
 742:	bb 24       	eor	r11, r11
 744:	97 fc       	sbrc	r9, 7
 746:	b0 94       	com	r11
 748:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
 74a:	a3 e4       	ldi	r26, 0x43	; 67
 74c:	b3 ee       	ldi	r27, 0xE3	; 227
 74e:	a7 01       	movw	r20, r14
 750:	96 01       	movw	r18, r12
 752:	0e 94 cc 05 	call	0xb98	; 0xb98 <__mulohisi3>
 756:	bb 27       	eor	r27, r27
 758:	97 fd       	sbrc	r25, 7
 75a:	b0 95       	com	r27
 75c:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
 75e:	88 0e       	add	r8, r24
 760:	99 1e       	adc	r9, r25
 762:	aa 1e       	adc	r10, r26
 764:	bb 1e       	adc	r11, r27
 766:	3f ec       	ldi	r19, 0xCF	; 207
 768:	83 0e       	add	r8, r19
 76a:	3e e0       	ldi	r19, 0x0E	; 14
 76c:	93 1e       	adc	r9, r19
 76e:	a1 1c       	adc	r10, r1
 770:	b1 1c       	adc	r11, r1
 772:	d5 01       	movw	r26, r10
 774:	c4 01       	movw	r24, r8
 776:	68 94       	set
 778:	13 f8       	bld	r1, 3
 77a:	b5 95       	asr	r27
 77c:	a7 95       	ror	r26
 77e:	97 95       	ror	r25
 780:	87 95       	ror	r24
 782:	16 94       	lsr	r1
 784:	d1 f7       	brne	.-12     	; 0x77a <bmp085_getrawpressure+0x28a>
 786:	bc 01       	movw	r22, r24
 788:	cd 01       	movw	r24, r26
 78a:	6c 0d       	add	r22, r12
 78c:	7d 1d       	adc	r23, r13
 78e:	8e 1d       	adc	r24, r14
 790:	9f 1d       	adc	r25, r15
 792:	60 93 c4 00 	sts	0x00C4, r22
 796:	70 93 c5 00 	sts	0x00C5, r23
 79a:	80 93 c6 00 	sts	0x00C6, r24
 79e:	90 93 c7 00 	sts	0x00C7, r25

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
 7a2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <bmp085_avaragefilter>
 7a6:	60 93 c4 00 	sts	0x00C4, r22
 7aa:	70 93 c5 00 	sts	0x00C5, r23
 7ae:	80 93 c6 00 	sts	0x00C6, r24
 7b2:	90 93 c7 00 	sts	0x00C7, r25
	#endif
}
 7b6:	2b 96       	adiw	r28, 0x0b	; 11
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	f8 94       	cli
 7bc:	de bf       	out	0x3e, r29	; 62
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	cd bf       	out	0x3d, r28	; 61
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	ff 90       	pop	r15
 7c8:	ef 90       	pop	r14
 7ca:	df 90       	pop	r13
 7cc:	cf 90       	pop	r12
 7ce:	bf 90       	pop	r11
 7d0:	af 90       	pop	r10
 7d2:	9f 90       	pop	r9
 7d4:	8f 90       	pop	r8
 7d6:	7f 90       	pop	r7
 7d8:	6f 90       	pop	r6
 7da:	5f 90       	pop	r5
 7dc:	4f 90       	pop	r4
 7de:	08 95       	ret

000007e0 <bmp085_init>:
}

/*
 * init bmp085
 */
void bmp085_init() {
 7e0:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
 7e2:	0e 94 49 00 	call	0x92	; 0x92 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e6:	83 e0       	ldi	r24, 0x03	; 3
 7e8:	8a 95       	dec	r24
 7ea:	f1 f7       	brne	.-4      	; 0x7e8 <bmp085_init+0x8>
 7ec:	00 00       	nop
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
 7ee:	0e 94 31 01 	call	0x262	; 0x262 <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
 7f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <bmp085_getrawtemperature>
 7f6:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
 7f8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <bmp085_getrawpressure>
 7fc:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <ds1307_init>:


/*
 * initialize the accellerometer
 */
void ds1307_init() {
 804:	08 95       	ret

00000806 <ds1307_getdate>:
}

/*
 * get date
 */
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 806:	8f 92       	push	r8
 808:	9f 92       	push	r9
 80a:	af 92       	push	r10
 80c:	bf 92       	push	r11
 80e:	cf 92       	push	r12
 810:	df 92       	push	r13
 812:	ef 92       	push	r14
 814:	ff 92       	push	r15
 816:	0f 93       	push	r16
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	ec 01       	movw	r28, r24
 820:	6b 01       	movw	r12, r22
 822:	5a 01       	movw	r10, r20
 824:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
 826:	80 ed       	ldi	r24, 0xD0	; 208
 828:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_start_wait>
	i2c_write(0x00);//stop oscillator
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	0e 94 92 00 	call	0x124	; 0x124 <i2c_write>
	i2c_stop();
 832:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>

	i2c_rep_start(DS1307_ADDR | I2C_READ);
 836:	81 ed       	ldi	r24, 0xD1	; 209
 838:	0e 94 89 00 	call	0x112	; 0x112 <i2c_rep_start>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
 83c:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_readAck>
 840:	8f 77       	andi	r24, 0x7F	; 127

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 842:	98 2f       	mov	r25, r24
 844:	92 95       	swap	r25
 846:	9f 70       	andi	r25, 0x0F	; 15
 848:	29 2f       	mov	r18, r25
 84a:	22 0f       	add	r18, r18
 84c:	92 0f       	add	r25, r18
 84e:	99 0f       	add	r25, r25
 850:	89 1b       	sub	r24, r25
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
	i2c_write(0x00);//stop oscillator
	i2c_stop();

	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
 852:	f7 01       	movw	r30, r14
 854:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
 856:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 85a:	98 2f       	mov	r25, r24
 85c:	92 95       	swap	r25
 85e:	9f 70       	andi	r25, 0x0F	; 15
 860:	29 2f       	mov	r18, r25
 862:	22 0f       	add	r18, r18
 864:	92 0f       	add	r25, r18
 866:	99 0f       	add	r25, r25
 868:	89 1b       	sub	r24, r25
	i2c_write(0x00);//stop oscillator
	i2c_stop();

	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
 86a:	f8 01       	movw	r30, r16
 86c:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
 86e:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 872:	98 2f       	mov	r25, r24
 874:	92 95       	swap	r25
 876:	9f 70       	andi	r25, 0x0F	; 15
 878:	29 2f       	mov	r18, r25
 87a:	22 0f       	add	r18, r18
 87c:	92 0f       	add	r25, r18
 87e:	99 0f       	add	r25, r25
 880:	89 1b       	sub	r24, r25
	i2c_stop();

	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
 882:	f4 01       	movw	r30, r8
 884:	80 83       	st	Z, r24
	i2c_readAck();
 886:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_readAck>
	*day = ds1307_bcd2dec(i2c_readAck());
 88a:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 88e:	98 2f       	mov	r25, r24
 890:	92 95       	swap	r25
 892:	9f 70       	andi	r25, 0x0F	; 15
 894:	29 2f       	mov	r18, r25
 896:	22 0f       	add	r18, r18
 898:	92 0f       	add	r25, r18
 89a:	99 0f       	add	r25, r25
 89c:	89 1b       	sub	r24, r25
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	*day = ds1307_bcd2dec(i2c_readAck());
 89e:	f5 01       	movw	r30, r10
 8a0:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
 8a2:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_readAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 8a6:	98 2f       	mov	r25, r24
 8a8:	92 95       	swap	r25
 8aa:	9f 70       	andi	r25, 0x0F	; 15
 8ac:	29 2f       	mov	r18, r25
 8ae:	22 0f       	add	r18, r18
 8b0:	92 0f       	add	r25, r18
 8b2:	99 0f       	add	r25, r25
 8b4:	89 1b       	sub	r24, r25
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	*day = ds1307_bcd2dec(i2c_readAck());
	*month = ds1307_bcd2dec(i2c_readAck());
 8b6:	f6 01       	movw	r30, r12
 8b8:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
 8ba:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_readNak>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 8be:	98 2f       	mov	r25, r24
 8c0:	92 95       	swap	r25
 8c2:	9f 70       	andi	r25, 0x0F	; 15
 8c4:	29 2f       	mov	r18, r25
 8c6:	22 0f       	add	r18, r18
 8c8:	92 0f       	add	r25, r18
 8ca:	99 0f       	add	r25, r25
 8cc:	89 1b       	sub	r24, r25
	*minute = ds1307_bcd2dec(i2c_readAck());
	*hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	*day = ds1307_bcd2dec(i2c_readAck());
	*month = ds1307_bcd2dec(i2c_readAck());
	*year = ds1307_bcd2dec(i2c_readNak());
 8ce:	88 83       	st	Y, r24
	i2c_stop();
 8d0:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>
}
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	ff 90       	pop	r15
 8de:	ef 90       	pop	r14
 8e0:	df 90       	pop	r13
 8e2:	cf 90       	pop	r12
 8e4:	bf 90       	pop	r11
 8e6:	af 90       	pop	r10
 8e8:	9f 90       	pop	r9
 8ea:	8f 90       	pop	r8
 8ec:	08 95       	ret

000008ee <Flash_Enable>:

//***************************************************************************************************

void Flash_Enable()
{
	LCD_Control |= (1<<Enable);
 8ee:	c2 9a       	sbi	0x18, 2	; 24
	asm volatile ("nop");
 8f0:	00 00       	nop
	asm volatile ("nop");
 8f2:	00 00       	nop
	LCD_Control &= ~(1<<Enable);
 8f4:	c2 98       	cbi	0x18, 2	; 24
 8f6:	08 95       	ret

000008f8 <Check_if_LCD_is_busy>:

//***************************************************************************************************

void Check_if_LCD_is_busy()
{
	DataDir_DataBus = 0;			// set for input
 8f8:	11 ba       	out	0x11, r1	; 17
	LCD_Control |= (1<<ReadWrite);	// read from the LCD
 8fa:	c1 9a       	sbi	0x18, 1	; 24
	LCD_Control &= ~(1<<RS);		// set for command mode
 8fc:	c0 98       	cbi	0x18, 0	; 24
	
		while(DataBus >=80)			// keep flashing Enable until the LCD is no longer busy
 8fe:	82 b3       	in	r24, 0x12	; 18
 900:	80 35       	cpi	r24, 0x50	; 80
 902:	28 f0       	brcs	.+10     	; 0x90e <Check_if_LCD_is_busy+0x16>
		{
		Flash_Enable();
 904:	0e 94 77 04 	call	0x8ee	; 0x8ee <Flash_Enable>
{
	DataDir_DataBus = 0;			// set for input
	LCD_Control |= (1<<ReadWrite);	// read from the LCD
	LCD_Control &= ~(1<<RS);		// set for command mode
	
		while(DataBus >=80)			// keep flashing Enable until the LCD is no longer busy
 908:	82 b3       	in	r24, 0x12	; 18
 90a:	80 35       	cpi	r24, 0x50	; 80
 90c:	d8 f7       	brcc	.-10     	; 0x904 <Check_if_LCD_is_busy+0xc>
		{
		Flash_Enable();
		}

	DataDir_DataBus = 0xFF;			// set back to output
 90e:	8f ef       	ldi	r24, 0xFF	; 255
 910:	81 bb       	out	0x11, r24	; 17
 912:	08 95       	ret

00000914 <Send_Command>:
}

//***************************************************************************************************

void Send_Command(unsigned char command)
{
 914:	cf 93       	push	r28
 916:	c8 2f       	mov	r28, r24
	Check_if_LCD_is_busy();
 918:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Check_if_LCD_is_busy>
	DataBus = command;
 91c:	c2 bb       	out	0x12, r28	; 18
	LCD_Control &= ~((1<<RS) | (1<<ReadWrite));
 91e:	88 b3       	in	r24, 0x18	; 24
 920:	8c 7f       	andi	r24, 0xFC	; 252
 922:	88 bb       	out	0x18, r24	; 24
	Flash_Enable();
 924:	0e 94 77 04 	call	0x8ee	; 0x8ee <Flash_Enable>
	DataBus = 0;
 928:	12 ba       	out	0x12, r1	; 18
}
 92a:	cf 91       	pop	r28
 92c:	08 95       	ret

0000092e <Initialize_LCD>:

//***************************************************************************************************

void Initialize_LCD()
{
	DataDir_LCD_Control |= (1<<Enable) | (1<<ReadWrite) | (1<<RS);
 92e:	87 b3       	in	r24, 0x17	; 23
 930:	87 60       	ori	r24, 0x07	; 7
 932:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 934:	8f e5       	ldi	r24, 0x5F	; 95
 936:	9a ee       	ldi	r25, 0xEA	; 234
 938:	01 97       	sbiw	r24, 0x01	; 1
 93a:	f1 f7       	brne	.-4      	; 0x938 <Initialize_LCD+0xa>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <Initialize_LCD+0x10>
 93e:	00 00       	nop
	_delay_ms(15);
	Send_Command(0x01);			// clear the screen
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	0e 94 8a 04 	call	0x914	; 0x914 <Send_Command>
 946:	8f e3       	ldi	r24, 0x3F	; 63
 948:	9f e1       	ldi	r25, 0x1F	; 31
 94a:	01 97       	sbiw	r24, 0x01	; 1
 94c:	f1 f7       	brne	.-4      	; 0x94a <Initialize_LCD+0x1c>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <Initialize_LCD+0x22>
 950:	00 00       	nop
	_delay_ms(2);
	Send_Command(0x38);			// set for 8-bit mode // 0x20 for 4-bit?
 952:	88 e3       	ldi	r24, 0x38	; 56
 954:	0e 94 8a 04 	call	0x914	; 0x914 <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 958:	87 ec       	ldi	r24, 0xC7	; 199
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <Initialize_LCD+0x2e>
 960:	00 c0       	rjmp	.+0      	; 0x962 <Initialize_LCD+0x34>
 962:	00 00       	nop
	_delay_us(50);
	Send_Command(0b00001100);	// screen: display on, cursor off, blink off
 964:	8c e0       	ldi	r24, 0x0C	; 12
 966:	0e 94 8a 04 	call	0x914	; 0x914 <Send_Command>
 96a:	87 ec       	ldi	r24, 0xC7	; 199
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	01 97       	sbiw	r24, 0x01	; 1
 970:	f1 f7       	brne	.-4      	; 0x96e <Initialize_LCD+0x40>
 972:	00 c0       	rjmp	.+0      	; 0x974 <Initialize_LCD+0x46>
 974:	00 00       	nop
 976:	08 95       	ret

00000978 <Send_Character>:
}

//***************************************************************************************************

void Send_Character(unsigned char character)
{
 978:	cf 93       	push	r28
 97a:	c8 2f       	mov	r28, r24
	Check_if_LCD_is_busy();
 97c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Check_if_LCD_is_busy>
	DataBus = character;
 980:	c2 bb       	out	0x12, r28	; 18
	LCD_Control &= ~(1<<ReadWrite);
 982:	c1 98       	cbi	0x18, 1	; 24
	LCD_Control |= (1<<RS);
 984:	c0 9a       	sbi	0x18, 0	; 24
	Flash_Enable();
 986:	0e 94 77 04 	call	0x8ee	; 0x8ee <Flash_Enable>
	DataBus = 0;
 98a:	12 ba       	out	0x12, r1	; 18
}
 98c:	cf 91       	pop	r28
 98e:	08 95       	ret

00000990 <Send_String>:

//***************************************************************************************************

void Send_String(char *stringOfCharacters)
{
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	ec 01       	movw	r28, r24
	while(*stringOfCharacters>0)
 996:	88 81       	ld	r24, Y
 998:	88 23       	and	r24, r24
 99a:	49 f0       	breq	.+18     	; 0x9ae <Send_String+0x1e>
 99c:	21 96       	adiw	r28, 0x01	; 1
	{
		
	Send_Character(*stringOfCharacters++);
 99e:	0e 94 bc 04 	call	0x978	; 0x978 <Send_Character>
 9a2:	80 ea       	ldi	r24, 0xA0	; 160
 9a4:	8a 95       	dec	r24
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <Send_String+0x14>

//***************************************************************************************************

void Send_String(char *stringOfCharacters)
{
	while(*stringOfCharacters>0)
 9a8:	89 91       	ld	r24, Y+
 9aa:	81 11       	cpse	r24, r1
 9ac:	f8 cf       	rjmp	.-16     	; 0x99e <Send_String+0xe>
	{
		
	Send_Character(*stringOfCharacters++);
	_delay_us(30);
	}
}
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	08 95       	ret

000009b4 <Send_Int>:

//***************************************************************************************************

void Send_Int(uint16_t var)
{
 9b4:	cf 93       	push	r28
 9b6:	df 93       	push	r29
 9b8:	00 d0       	rcall	.+0      	; 0x9ba <Send_Int+0x6>
 9ba:	00 d0       	rcall	.+0      	; 0x9bc <Send_Int+0x8>
 9bc:	00 d0       	rcall	.+0      	; 0x9be <Send_Int+0xa>
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 9c2:	4a e0       	ldi	r20, 0x0A	; 10
 9c4:	be 01       	movw	r22, r28
 9c6:	6f 5f       	subi	r22, 0xFF	; 255
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	0e 94 d1 05 	call	0xba2	; 0xba2 <__itoa_ncheck>
	char var_as_string[6];			// string that will store the number
	itoa(var, var_as_string, 10);	// base: 2 for binary, 10 for decimal, 16 for hex
	Send_String(var_as_string);
 9ce:	ce 01       	movw	r24, r28
 9d0:	01 96       	adiw	r24, 0x01	; 1
 9d2:	0e 94 c8 04 	call	0x990	; 0x990 <Send_String>
}
 9d6:	26 96       	adiw	r28, 0x06	; 6
 9d8:	0f b6       	in	r0, 0x3f	; 63
 9da:	f8 94       	cli
 9dc:	de bf       	out	0x3e, r29	; 62
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	cd bf       	out	0x3d, r28	; 61
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	08 95       	ret

000009e8 <GotoLCD_Location>:

//***************************************************************************************************

void GotoLCD_Location(uint8_t x, uint8_t y)
{
	Send_Command(0x80 + firstColumnPos[y-1] + (x-1));
 9e8:	81 58       	subi	r24, 0x81	; 129
 9ea:	e6 2f       	mov	r30, r22
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	e1 5a       	subi	r30, 0xA1	; 161
 9f0:	ff 4f       	sbci	r31, 0xFF	; 255
 9f2:	90 81       	ld	r25, Z
 9f4:	89 0f       	add	r24, r25
 9f6:	0e 94 8a 04 	call	0x914	; 0x914 <Send_Command>
 9fa:	80 ea       	ldi	r24, 0xA0	; 160
 9fc:	8a 95       	dec	r24
 9fe:	f1 f7       	brne	.-4      	; 0x9fc <GotoLCD_Location+0x14>
 a00:	08 95       	ret

00000a02 <main>:
#include <util/delay.h>
#include <math.h>
#include "I2Cfncs.h"
#include "LCD.h"

int main(void) {
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	00 d0       	rcall	.+0      	; 0xa08 <main+0x6>
 a08:	00 d0       	rcall	.+0      	; 0xa0a <main+0x8>
 a0a:	00 d0       	rcall	.+0      	; 0xa0c <main+0xa>
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
	long l;
	double d;
	char printbuff[10];
	uint8_t time[6];
	DDRA=0xff;
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 a14:	1b ba       	out	0x1b, r1	; 27
	
	//init bmp085
	bmp085_init();
 a16:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <bmp085_init>
	ds1307_init();
 a1a:	0e 94 02 04 	call	0x804	; 0x804 <ds1307_init>
	Initialize_LCD();
 a1e:	0e 94 97 04 	call	0x92e	; 0x92e <Initialize_LCD>
	
	//main loop
	
	while(1)
	{
	ds1307_getdate(&time[0], &time[1], &time[2], &time[3], &time[4], &time[5]);
 a22:	ce 01       	movw	r24, r28
 a24:	06 96       	adiw	r24, 0x06	; 6
 a26:	7c 01       	movw	r14, r24
 a28:	8e 01       	movw	r16, r28
 a2a:	0b 5f       	subi	r16, 0xFB	; 251
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	9e 01       	movw	r18, r28
 a30:	2c 5f       	subi	r18, 0xFC	; 252
 a32:	3f 4f       	sbci	r19, 0xFF	; 255
 a34:	ae 01       	movw	r20, r28
 a36:	4d 5f       	subi	r20, 0xFD	; 253
 a38:	5f 4f       	sbci	r21, 0xFF	; 255
 a3a:	be 01       	movw	r22, r28
 a3c:	6e 5f       	subi	r22, 0xFE	; 254
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255
 a40:	05 97       	sbiw	r24, 0x05	; 5
 a42:	0e 94 03 04 	call	0x806	; 0x806 <ds1307_getdate>
	GotoLCD_Location(1,1);
 a46:	61 e0       	ldi	r22, 0x01	; 1
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <GotoLCD_Location>
	
		Send_String("Time:");
 a4e:	84 e6       	ldi	r24, 0x64	; 100
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 c8 04 	call	0x990	; 0x990 <Send_String>
		Send_Int(time[0]);
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Send_Int>
		Send_String(" ");
 a5e:	8a e6       	ldi	r24, 0x6A	; 106
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	0e 94 c8 04 	call	0x990	; 0x990 <Send_String>
		Send_Int(time[1]);
 a66:	8a 81       	ldd	r24, Y+2	; 0x02
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Send_Int>
		Send_String(" ");
 a6e:	8a e6       	ldi	r24, 0x6A	; 106
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 c8 04 	call	0x990	; 0x990 <Send_String>
		Send_Int(time[2]);
 a76:	8b 81       	ldd	r24, Y+3	; 0x03
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Send_Int>
		GotoLCD_Location(1,2);
 a7e:	62 e0       	ldi	r22, 0x02	; 2
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <GotoLCD_Location>
		Send_Int(time[3]);
 a86:	8c 81       	ldd	r24, Y+4	; 0x04
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Send_Int>
		Send_String(" ");
 a8e:	8a e6       	ldi	r24, 0x6A	; 106
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 c8 04 	call	0x990	; 0x990 <Send_String>
		Send_Int(time[4]);
 a96:	8d 81       	ldd	r24, Y+5	; 0x05
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Send_Int>
		Send_String(" ");
 a9e:	8a e6       	ldi	r24, 0x6A	; 106
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 c8 04 	call	0x990	; 0x990 <Send_String>
		Send_Int(time[5]);
 aa6:	8e 81       	ldd	r24, Y+6	; 0x06
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Send_Int>
		Send_String(" ");
 aae:	8a e6       	ldi	r24, 0x6A	; 106
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	0e 94 c8 04 	call	0x990	; 0x990 <Send_String>
		

		
		
		
		PORTA=time[5];
 ab6:	8e 81       	ldd	r24, Y+6	; 0x06
 ab8:	8b bb       	out	0x1b, r24	; 27
 aba:	b3 cf       	rjmp	.-154    	; 0xa22 <main+0x20>

00000abc <__mulsi3>:
 abc:	db 01       	movw	r26, r22
 abe:	8f 93       	push	r24
 ac0:	9f 93       	push	r25
 ac2:	0e 94 be 05 	call	0xb7c	; 0xb7c <__muluhisi3>
 ac6:	bf 91       	pop	r27
 ac8:	af 91       	pop	r26
 aca:	a2 9f       	mul	r26, r18
 acc:	80 0d       	add	r24, r0
 ace:	91 1d       	adc	r25, r1
 ad0:	a3 9f       	mul	r26, r19
 ad2:	90 0d       	add	r25, r0
 ad4:	b2 9f       	mul	r27, r18
 ad6:	90 0d       	add	r25, r0
 ad8:	11 24       	eor	r1, r1
 ada:	08 95       	ret

00000adc <__udivmodsi4>:
 adc:	a1 e2       	ldi	r26, 0x21	; 33
 ade:	1a 2e       	mov	r1, r26
 ae0:	aa 1b       	sub	r26, r26
 ae2:	bb 1b       	sub	r27, r27
 ae4:	fd 01       	movw	r30, r26
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__udivmodsi4_ep>

00000ae8 <__udivmodsi4_loop>:
 ae8:	aa 1f       	adc	r26, r26
 aea:	bb 1f       	adc	r27, r27
 aec:	ee 1f       	adc	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	a2 17       	cp	r26, r18
 af2:	b3 07       	cpc	r27, r19
 af4:	e4 07       	cpc	r30, r20
 af6:	f5 07       	cpc	r31, r21
 af8:	20 f0       	brcs	.+8      	; 0xb02 <__udivmodsi4_ep>
 afa:	a2 1b       	sub	r26, r18
 afc:	b3 0b       	sbc	r27, r19
 afe:	e4 0b       	sbc	r30, r20
 b00:	f5 0b       	sbc	r31, r21

00000b02 <__udivmodsi4_ep>:
 b02:	66 1f       	adc	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	88 1f       	adc	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	1a 94       	dec	r1
 b0c:	69 f7       	brne	.-38     	; 0xae8 <__udivmodsi4_loop>
 b0e:	60 95       	com	r22
 b10:	70 95       	com	r23
 b12:	80 95       	com	r24
 b14:	90 95       	com	r25
 b16:	9b 01       	movw	r18, r22
 b18:	ac 01       	movw	r20, r24
 b1a:	bd 01       	movw	r22, r26
 b1c:	cf 01       	movw	r24, r30
 b1e:	08 95       	ret

00000b20 <__divmodsi4>:
 b20:	05 2e       	mov	r0, r21
 b22:	97 fb       	bst	r25, 7
 b24:	1e f4       	brtc	.+6      	; 0xb2c <__divmodsi4+0xc>
 b26:	00 94       	com	r0
 b28:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__negsi2>
 b2c:	57 fd       	sbrc	r21, 7
 b2e:	07 d0       	rcall	.+14     	; 0xb3e <__divmodsi4_neg2>
 b30:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodsi4>
 b34:	07 fc       	sbrc	r0, 7
 b36:	03 d0       	rcall	.+6      	; 0xb3e <__divmodsi4_neg2>
 b38:	4e f4       	brtc	.+18     	; 0xb4c <__divmodsi4_exit>
 b3a:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__negsi2>

00000b3e <__divmodsi4_neg2>:
 b3e:	50 95       	com	r21
 b40:	40 95       	com	r20
 b42:	30 95       	com	r19
 b44:	21 95       	neg	r18
 b46:	3f 4f       	sbci	r19, 0xFF	; 255
 b48:	4f 4f       	sbci	r20, 0xFF	; 255
 b4a:	5f 4f       	sbci	r21, 0xFF	; 255

00000b4c <__divmodsi4_exit>:
 b4c:	08 95       	ret

00000b4e <__negsi2>:
 b4e:	90 95       	com	r25
 b50:	80 95       	com	r24
 b52:	70 95       	com	r23
 b54:	61 95       	neg	r22
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	8f 4f       	sbci	r24, 0xFF	; 255
 b5a:	9f 4f       	sbci	r25, 0xFF	; 255
 b5c:	08 95       	ret

00000b5e <__umulhisi3>:
 b5e:	a2 9f       	mul	r26, r18
 b60:	b0 01       	movw	r22, r0
 b62:	b3 9f       	mul	r27, r19
 b64:	c0 01       	movw	r24, r0
 b66:	a3 9f       	mul	r26, r19
 b68:	70 0d       	add	r23, r0
 b6a:	81 1d       	adc	r24, r1
 b6c:	11 24       	eor	r1, r1
 b6e:	91 1d       	adc	r25, r1
 b70:	b2 9f       	mul	r27, r18
 b72:	70 0d       	add	r23, r0
 b74:	81 1d       	adc	r24, r1
 b76:	11 24       	eor	r1, r1
 b78:	91 1d       	adc	r25, r1
 b7a:	08 95       	ret

00000b7c <__muluhisi3>:
 b7c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umulhisi3>
 b80:	a5 9f       	mul	r26, r21
 b82:	90 0d       	add	r25, r0
 b84:	b4 9f       	mul	r27, r20
 b86:	90 0d       	add	r25, r0
 b88:	a4 9f       	mul	r26, r20
 b8a:	80 0d       	add	r24, r0
 b8c:	91 1d       	adc	r25, r1
 b8e:	11 24       	eor	r1, r1
 b90:	08 95       	ret

00000b92 <__mulshisi3>:
 b92:	b7 ff       	sbrs	r27, 7
 b94:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__muluhisi3>

00000b98 <__mulohisi3>:
 b98:	0e 94 be 05 	call	0xb7c	; 0xb7c <__muluhisi3>
 b9c:	82 1b       	sub	r24, r18
 b9e:	93 0b       	sbc	r25, r19
 ba0:	08 95       	ret

00000ba2 <__itoa_ncheck>:
 ba2:	bb 27       	eor	r27, r27
 ba4:	4a 30       	cpi	r20, 0x0A	; 10
 ba6:	31 f4       	brne	.+12     	; 0xbb4 <__itoa_ncheck+0x12>
 ba8:	99 23       	and	r25, r25
 baa:	22 f4       	brpl	.+8      	; 0xbb4 <__itoa_ncheck+0x12>
 bac:	bd e2       	ldi	r27, 0x2D	; 45
 bae:	90 95       	com	r25
 bb0:	81 95       	neg	r24
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__utoa_common>

00000bb8 <__utoa_ncheck>:
 bb8:	bb 27       	eor	r27, r27

00000bba <__utoa_common>:
 bba:	fb 01       	movw	r30, r22
 bbc:	55 27       	eor	r21, r21
 bbe:	aa 27       	eor	r26, r26
 bc0:	88 0f       	add	r24, r24
 bc2:	99 1f       	adc	r25, r25
 bc4:	aa 1f       	adc	r26, r26
 bc6:	a4 17       	cp	r26, r20
 bc8:	10 f0       	brcs	.+4      	; 0xbce <__utoa_common+0x14>
 bca:	a4 1b       	sub	r26, r20
 bcc:	83 95       	inc	r24
 bce:	50 51       	subi	r21, 0x10	; 16
 bd0:	b9 f7       	brne	.-18     	; 0xbc0 <__utoa_common+0x6>
 bd2:	a0 5d       	subi	r26, 0xD0	; 208
 bd4:	aa 33       	cpi	r26, 0x3A	; 58
 bd6:	08 f0       	brcs	.+2      	; 0xbda <__utoa_common+0x20>
 bd8:	a9 5d       	subi	r26, 0xD9	; 217
 bda:	a1 93       	st	Z+, r26
 bdc:	00 97       	sbiw	r24, 0x00	; 0
 bde:	79 f7       	brne	.-34     	; 0xbbe <__utoa_common+0x4>
 be0:	b1 11       	cpse	r27, r1
 be2:	b1 93       	st	Z+, r27
 be4:	11 92       	st	Z+, r1
 be6:	cb 01       	movw	r24, r22
 be8:	0c 94 f6 05 	jmp	0xbec	; 0xbec <strrev>

00000bec <strrev>:
 bec:	dc 01       	movw	r26, r24
 bee:	fc 01       	movw	r30, r24
 bf0:	67 2f       	mov	r22, r23
 bf2:	71 91       	ld	r23, Z+
 bf4:	77 23       	and	r23, r23
 bf6:	e1 f7       	brne	.-8      	; 0xbf0 <strrev+0x4>
 bf8:	32 97       	sbiw	r30, 0x02	; 2
 bfa:	04 c0       	rjmp	.+8      	; 0xc04 <strrev+0x18>
 bfc:	7c 91       	ld	r23, X
 bfe:	6d 93       	st	X+, r22
 c00:	70 83       	st	Z, r23
 c02:	62 91       	ld	r22, -Z
 c04:	ae 17       	cp	r26, r30
 c06:	bf 07       	cpc	r27, r31
 c08:	c8 f3       	brcs	.-14     	; 0xbfc <strrev+0x10>
 c0a:	08 95       	ret

00000c0c <_exit>:
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>
